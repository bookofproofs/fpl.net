uses Fpl.Commons
uses Fpl.SetTheory.ZermeloFraenkel

/* Binary operation. Note that the generic type "tplSetElem" limits a Binary operation to be closed
    inside a type, however, it still might be not closed inside a particular set of elements of this type.
    we will therefore need another predicate to ensure, but defining it will require the the context
    of a particular set. It is, therefore, not possible to define the closure for a binary operation without this
    broader context. */
def func BinOp(x,y: tplSetElem) -> tplSetElem
{
    intr
    property optional pred IsAssociative()
    {
        all a,b,c in tplSetElem (  <@self(a,@self(b,c)) = @self(@self(a,b),c)>  )
    }

    property optional pred IsCommutative()
    {
        all a,b in tplSetElem ( <@self(a,b) = @self(b,a)> )
    }

    property optional pred IsLeftNeutralElement(e: tplSetElem)
    {
        all x in tplSetElem ( <@self(e,x) = x> )
    }

    property optional pred IsRightNeutralElement(e: tplSetElem)
    {
        all x in tplSetElem ( <@self(x,e) = x> )
    }

    property optional pred IsNeutralElement(e: tplSetElem)
    {
        and (IsLeftNeutralElement(e), IsRightNeutralElement(e))
    }

    property optional pred HasLeftNeutralElement()
    {
        ex e in tplSetElem ( IsLeftNeutralElement(e) )
    }

    property optional pred HasRightNeutralElement()
    {
        ex e in tplSetElem ( IsRightNeutralElement(e) )
    }

    property optional pred HasNeutralElement()
    {
        ex e in tplSetElem ( IsNeutralElement(e) )
    }

    property optional tplSetElem LeftNeutralElement()
    {
        dec assert IsLeftNeutralElement(self);
        self
    }

    property optional tplSetElem RightNeutralElement()
    {
        dec assert IsRightNeutralElement(self);
        self
    }

    property optional tplSetElem NeutralElement()
    {
        dec assert IsNeutralElement(self);
        self
    }

}

def func Composition(operands:* tplSetElem) -> tplSetElem
{
    intrinsic
}

/* an algebraic structure is derived from a set type with at least one binary operation
    defined on its set elements ("BinOp +ops" stands for one or more operands of type BinOp).
    Since tplSet and tplSetElem are independent from each other, we will have to ensure the closure of each of
    them inside the set x of type tplSet. */
def class AlgebraicStructure: obj
{

    dec
        ~myCarrierSet: tplSet
        ~myOps:+ Composition(myElem:* tplSetElem)
    ;

    ctor AlgebraicStructure(x: tplSet, ops:+ Composition(args:* tplSetElem))
    {
        dec
            ~a: obj
            ~arg: index
            myOps := ops
            myCarrierSet := x

            // Assert that all types used in the declaration of AlgebraicStructure
            // can be treated like they were sets, even if they are not derived from the type "Set" in their original
            // definition! This, means that the In predicate has a non-transitive model
            // this is comparable to implementing an interface (or comparable to multiple inheritance).
            // The interpreter only asserts the types tplSet, and tplSetElement to be sets
            assert is (x,Set)
            for arg in args 
            (
                assert is(arg,Set)
            )

            assert
                all a
                (
                    impl ( is(a,tplSetElem), In(a,myCarrierSet) )
                )
            self!obj()
        ;
        self

    }

    property  func NthOp(n: index) -> Composition
    {
        return myOps!n
    }

    // Every algebraic structure will have a mandatory property called CarrierSet of type Set.
    property  Set CarrierSet()
    {
        dec 
            self:=myCarrierSet
        ;
        self
    }


}

// a magma is an algebraic structure with one binary operation defined on it
// Note how the "constructor" of the base class AlgebraicStructure is called with the arguments x and op
def class Magma: AlgebraicStructure
{

    ctor Magma(x: tplSet, op: BinOp)
    {
        dec
            self!AlgebraicStructure(x,op)
        ;
        self
    }
}

// a semigroup is a magma whose binary operation is associative using "non-full-qualified" parameters
def class Semigroup: Magma
{
    ctor Semigroup(x: tplSet, op: BinOp)
    {
        dec 
            assert op.IsAssociative()
            self!Magma(x,op)
        ;
        self
    }

}

// a monoid is a semigroup whose binary operation has a neutral element
// we define this element a mandatory property of the monoid.
// Note how we use "full-qualified" parameters to ensure that the type "tpl" will be of exactly the  same ty
def class Monoid: Semigroup
{
    dec ~myOp: BinOp(a,b: tplSetElem);

    ctor Monoid(x: tplSet, op: BinOp)
    {
        dec 
            myOp:=op
            assert myOp.HasNeutralElement()
            self!Semigroup(x,op)
        ;
        self
    }

    property tplSetElem NeutralElem()
    {
        dec
            self:=myOp.NeutralElement()
        ;
        self
    }
}

// Exponentiation in a monoid
// Note how we use the Zermelo Fraenkel In predicate to ensure that y is the element of the monoid carrier set x.
def func Exp
    (
    m: Monoid(x: tplSet, op: BinOp(a,b: tplSetElem)),
    y: tplSetElem,
    n: Nat
    ) -> tplSetElem
{
    dec 
        ~result:tplSetElem 
        assert In(y,x)
        cases
        (
            | <n = 0>: result := m.NeutralElem()
            ? result :=
                    op(
                        y,
                        Exp( m(y,op), y, Sub(n,1))
                    )
        )
    ;
    return result

}

// a group is a monoid, in which an inverse element exists for all elements
def class Group: Monoid
{
    dec ~myOp: BinOp(a,b: tplSetElem);

    ctor Group(x: tplSet, op: BinOp)
    {
        dec
            myOp:=op
            self!Monoid (x,op)
        ;
        self
    }

    property pred InverseExistsForAllElements()
    {
        all x1 in tplSetElem
        (
            ex x2 in tplSetElem
            (
                Equal( myOp(x1,x2), self.NeutralElem() )
            )
        )
    }

    // provides a standard functionality inside a group that "returns" the inverse element to a given element
    // we can refer to this functionality as group.InverseOf(x)
    property func InverseOf(x: tplSetElem) -> tplSetElem
    {
        dec
                ~val: tplSetElem
            assert
                and
                (
                    <myOp(x,val) = self.NeutralElem()>,
                    <myOp(val,x) = self.NeutralElem()>
                )
        ;
        ret val
    }
}

def class CommutativeGroup: Group
{
    ctor CommutativeGroup(x: tpl, op: BinOp)
    {
        dec
            assert op.IsCommutative()
            self!Group(x,op)
        ;
        self                
    }
}

def class Ring: AlgebraicStructure
{
    dec 
        ~myX : tpl
        ~myAdd,myMul : BinOp
    ;

    ctor Ring (
        x: tpl,
        add: BinOp,
        mul: BinOp
    )
    {
        dec 
            myX:= x
            myAdd:=add
            myMul:=mul
            self!AlgebraicStructure(x, add, mul)
        ;
        self
    }

    property func Add(a,b:tplElem)->tplElem
    {
        dec
            assert and(In(a, myX), In(b, myX))
        ;
        return myAdd(a,b)
    }


    property func Mul(a,b:tplElem)->tplElem
    {
        dec
            assert and(In(a, myX), In(b, myX))
        ;
        return myMul(a,b)
    }

    property CommutativeGroup AdditiveGroup()
    {
        dec
            self:= CommutativeGroup(myX, myAdd)
        ;
        self
    }

    property Semigroup MultiplicativeSemiGroup()
    {
        dec
            self:= CommutativeGroup(myX, myMul)
        ;
        self
    }

    property pred RightDistributive()
    {
        all a,b,c in tplElem
        (
            < myMul(myAdd(a,b),c) = myAdd(myMul(a,c),myMul(b,c)) >
        )
    }

    property pred LeftDistributive()
    {
        all a,b,c in tplElem
        (
            < myMul(a,myAdd(b,c)) = myAdd(myMul(a,b),myMul(a,c)) >
        )
    }

    property pred Distributive()
    {
        and
        (
            RightDistributive(),
            LeftDistributive()
        )
    }
}

def class UnitRing: Ring
{

    ctor UnitRing(x: tpl, add, mul: BinOp)
    {
        dec
            self!Ring(x,add,mul)
        ;
        self
    }

    property Monoid MultiplicativeMonoid()
    {
        dec
            self:= Monoid(self.CarrierSet(), self.Mul())
        ;
        self
    }
}

def class CommutativeUnitRing: UnitRing
{
    ctor CommutativeUnitRing(x: tpl, add, mul: BinOp)
    {
        dec 
            assert mul.IsCommutative() 
            self!UnitRing(x,add,mul)
        ;
        self            
    }
}

def class Field: CommutativeUnitRing
{

    ctor Field(x: tpl, add,mul: BinOp)
    {
        dec 
            self!CommutativeUnitRing(x,add,mul)
        ;
        self
    }

    property CommutativeGroup MultiplicativeGroup()
    {
        dec
            self:= CommutativeGroup(self.CarrierSet(), self.Mul())
        ;
        self
    }

    property pred OneUnequalZero()
    {
        NotEqual(
            self.AdditiveGroup().NeutralElement(),
            self.MultiplicativeGroup().NeutralElement()
        )
    }

    property pred CollectElements()
    {
        all elem in tplElem
        (
            and
            (
                In(elem, x),
                is(elem, Set),
                In(elem, self)
            )
        )
    }
}

// Vector addition
def func AddVec(x,y: tplVector) -> tplVector
{
    intr
}

// Scalar Multiplication
def func ScalarMul(x: tplFieldElem, y: tplVector) -> tplVector
{
    intr
}

// Vector space over a field
def class VectorSpaceOverField : obj
{
    dec
        ~mySpace: NonemptySet
        ~myFieldAdd, myFieldMul: BinOp
        ~myFieldSet: tplFieldSet
        ~myScalarMul: ScalarMul 
        ~myVecAdd: AddVec 
        ~myField: Field
    ;
    ctor VectorSpaceOverField
        (
            space: NonemptySet,
                field: Field
                (
                    fieldSet: tplFieldSet,
                    fieldAdd: BinOp,
                    fieldMul: BinOp
                ),
            vecAdd: AddVec (v,w: tplVector),
            scalarMul: ScalarMul (a: tplFieldElement,v1: tplVector)
        )
    {
        dec
            self!obj()
            mySpace:= space
            myFieldAdd:= fieldAdd
            myFieldMul:= fieldMul
            myFieldSet:= fieldSet
            myScalarMul:= scalarMul
            myVecAdd:=vecAdd
            myField:= field
        ;
        self
    }


    // vs together with oppAdd is a commutative group,
    // let's call it with the identifier "Space"
    property CommutativeGroup Space()
    {
        dec
            self:=CommutativeGroup(mySpace, myFieldAdd)
        ;
        self
    }

    property Field MyField()
    {
        dec
            self:=myField
        ;
        self
    }

    property pred ScalarMulIsRightDistributive()
    {
        all u,w in tplVector, a in tplFieldElement
        (
            < myScalarMul(myVecAdd(u,w),a) = myVecAdd(myScalarMul(u,a),myScalarMul(w,a)) >
        )
    }

    property pred ScalarMulIsLeftDistributive()
    {
        all u,w in tplVector, a in tplFieldElement
        (
            < myScalarMul(a,myVecAdd(u,w)) = myVecAdd(myScalarMul(a,u),myScalarMul(a,w)) >
        )
    }

    property pred ScalarMulIsIsAssociative()
    {
        all a,b in tplFieldElement, u in tplVector
        (
            < myScalarMul(myFieldMul(a,b),u) = myScalarMul(a,myScalarMul(b,u)) >
        )
    }

    property pred ScalarMulNorm()
    {
        dec
            ~one: tplFieldElement
            one := myField.MultiplicativeGroup().NeutralElement()
        ;
        all u in tplVector
        (
            < myScalarMul(one,u) =  u >
        )
    }
}
