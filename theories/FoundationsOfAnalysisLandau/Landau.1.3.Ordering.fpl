uses Landau *

// If x = y + u then x > y ( > to b read "is greater than")
definition predicate Greater infix ">" 5 (x,y: Nat)
{
    (ex u in N {(x = y + u)} => x > y)
}

// If y = x + v then x < y ( < to b read "is smaller than")
definition predicate Smaller infix "<" 5 (x,y: Nat)
{
    (ex v in N {(x + v = y)} => x < y)
}

// For any given x,y, we have exactly one of the cases x = y, x > y, x < y
theorem Theorem_010()
{
    declaration
        ~x,y: N // for given x and y, exactly one of the following must be the case:
        ~case1,case2,case3:predicate
        case1 := (x = y) // x = y
        case2 := (x > y) // there exists a u (exactly one, by theorem 8) such that x = y + u
        case3 := (x < y) // there exists a v (exactly one, by theorem 8) such that y = x + v
    ;
    // PoC note: a predicative expression that becomes true "if and only if exactly one of the cases is true" 
    // PoC note: FPL allows abbreviation of complex predicates while using them as boolean variables in boolean expressions (reducing PL1 to PL0)
    and
    (
        // PoC note: the cases are mutually exclusive
         not (case1 and case2) 
        ,not (case1 and case3) 
        ,not (case2 and case3) 
        // and at least one of them is true
        ,or (case1, case2, case3)
    ) 

}

// Theorem 9, Definition Greater and Definition Smaller
proof Theorem_010$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. Theorem_009, bydef Greater, bydef Smaller |- trivial
    
    qed
}

// If x > y then y < x.
theorem Theorem_011()
{
    declaration ~x,y: Nat;
    (x > y => y < x)
}

// For each of these means that x = y + u for some suitable u
proof Theorem_011$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. bydef Greater, bydef Smaller |- trivial
    
    qed
}

// If x < y then y > x.
theorem Theorem_012()
{
    declaration ~x,y: Nat;
    (x < y => y > x)
}

// For each of these means that y = x + v for some suitable v
proof Theorem_012$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. bydef Greater, bydef Smaller |- trivial
    
    qed
}

// x >= y means x > y or x = y (">=" to be read "is greater than or equal to")
definition predicate GreaterOrEqual infix ">=" 5 (x,y: Nat)
{
    (x = y or x > y => x >= y)
}

// x <= y means x < y or x = y ("<=" to be read "is greater than or equal to")
definition predicate SmallerOrEqual infix "<=" 5 (x,y: Nat)
{
    (x = y or x < y => x <= y)
}

// If x>=y then y<=x
theorem Theorem_013()
{
    declaration ~x,y: Nat;
    impl((x >= y), (y <= x))
}

// Theorem 11
proof Theorem_013$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. Theorem_011 |- trivial
    qed
}

// If x>=y then y<=x
theorem Theorem_014()
{
    declaration ~x,y: Nat;
    impl((x >= y), (y <= x))
}

// Theorem 12
proof Theorem_014$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. Theorem_012 |- trivial
    qed
}

// (Transitivity of Ordering): If x < y, y < z, then x < z.
theorem Theorem_015()
{
    declaration ~x,y,z: Nat;
    (x < y and y < z => x < z)
}

proof Theorem_015$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x < y and y < z)
    200. Smaller |- ex u,w in N {(x + u = y and y + w = z)} 
    300. |- (z = (x + u) + w = x + (u + w))
    400. |- (x < z)
    
    qed
}

// Preliminary remark: Thus if x > y, y > z then x > z, since z < y, y < x, z < y, but in what follows I will not even bother to write down such statements, 
// which are obtained trivially by simply reading the formulas backwords.
// (Transitivity of Ordering): If x < y, y < z, then x < z.
theorem Theorem_015a()
{
    declaration ~x,y,z: Nat;
    (x > y and y > z => x > z)
}

proof Theorem_015a$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x > y and y > z)
    200. Smaller |- ex u,w in N {(x = y + u and y = z + w)} 
    300. |- (x = (z + w) + u = z + (w + u))
    400. |- (x > z)
    
    qed
}

// If x <= y, y < z  or  x < y,y <= z  then  x < z.
theorem Theorem_016()
{
    declaration ~x,y,z: Nat;
    
    (
        x <= y and y < z  or  
        x < y and y <= z  
        
        =>  
        
        x < z
    )
}

proof Theorem_016$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x = y and y < z  or  x < y and y = z)
    200. |- trivial // Obvious if an equality sign holds in the hypothesis;
    300. |- assume (x < y and y < z) // otherwise, Theorem 15 does it.
    400. Theorem_015 |- trivial
    
    qed
}

// If x <= y, y < z  or  x < y,y <= z  then  x < z.
theorem Theorem_017()
{
    declaration ~x,y,z: Nat;
    
    (
        x <= y and y <= z 
        
        =>  
        
        x <= z
    )
}

proof Theorem_017$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x = y and y = z)
    200. |- trivial // Obvious if two equality signs hold in the hypothesis;
    300. |- assume (x <= y and y < z or x < y and y <= z) // otherwise, Theorem 16 does it.
    400. Theorem_016 |- trivial
    
    qed
}

// A notation such as a < b <= c < d is justified on the basis of Theorem 15 and 17. While its immediate meaning is a < b, b<=c, c < d,
// it also implies, according to these theorems, that, say a < c, a < d, b < d.
/* 
PoC note: The notation a < b <= c < d might require some precedence rules. 
Obviously, mathematical infix operations can be grouped into equivalence classes that can be ordered. An ordering could look like this:
precedence "*","/","+","-",("=","<>","<=",">=","<",">"),"and","or","xor","in", meaning that "*" binds stronger than "/", "/" binds stronger than "+", etc.
The parentheses ("=","<>","<=",">=") mean that, for instance, a < b <= c < d, is interpreted like the conjunction and(a < b,b <= c,c < d) 
*/


theorem Theorem_018()
{
    declaration ~x,y: Nat;
    (x + y > x)
}

// Since 
proof Theorem_018$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- (x + y = x + y) // Since x + y = x + y 
    200. bydef Greater |- trivial // the conclusion follows from definition
    qed
}


// If x>y, or x=y, or x<y, then x + z > y + z, or x + z = y + z, or x + z < y + z, respectively.
/*
Poc note: These are actually 3 different theorems
*/
theorem Theorem_019a()
{
    declaration ~x,y,z: Nat;
    (x > y => x + z > y + z)
}
theorem Theorem_019b()
{
    declaration ~x,y,z: Nat;
    (x = y => x + z = y + z)
}
theorem Theorem_019c()
{
    declaration ~x,y,z: Nat;
    (x < y => x + z < y + z)
}
proof Theorem_019a$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x > y) // if x > y
    200. bydef Greater |- ex u in N {(x = y + u)} // then x = y + u 
    300. |- (x + z = (y + u) + z = (u + y) + z = u + (y + z) = (y + z) + u) //x + z = (y + u) + z = (u + y) + z = u + (y + z) = (y + z) + u 
    400. |- (x + z > y + z) // x + z > y + z
    qed
}

proof Theorem_019b$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x = y) // if x = y
    200. |- (x + z = y + z) // then, clearly, x + z = y = z
    qed
}

proof Theorem_019c$1
{
    // Direct Proof
    // Strategy: Assume that the premise is true, then prove that the conclusion also must be true.
    
    100. |- assume (x < y) // if x < y
    200. |- (y > x) 
    300. Theorem_019a$1 |- trivial
    qed
}

// For all x,y,z we have 1) if x + z > y + z, then x > z, 2) if x + z = y + z then x = y, 3) if x + z < y + z, then x < z. 
/*
Poc note: These are actually 3 different theorems
*/
theorem Theorem_020()
{
    declaration ~x,y,z: Nat;
    and
    (
        all x,y,z is Nat {(x + z > y + z => x > y)}
        ,all x,y,z is Nat {(x + z = y + z => x = y)}
        ,all x,y,z is Nat {(x + z < y + z => x < y)}
    )
}

proof Theorem_020$1
{
/*
Let x + z > y + z without fulfilling x > y. 
Then, according to Theorem 10 we would have x = y ore x < y.
This, by Theorem 19, would mean that either we have x + z = y + z or x + z < y + z.
This, on the other hand, contradicts Theorem 10, because it rules out x + y > y + z. 
It follows, that x > y.
*/
    // Proof by Contradiction (Type 1)
    // Strategy: Assume that the premise is false, then derive a contradiction.
    
    100a. |- assume ((x + z > y + z) and not (x > y)) // Let x
    200a. Theorem_010 |- (x < y or x = y)
    300a. Theorem_019 |- (x + z < y + z or x + z = y + z)
    400a. Theorem_010 |- not (x + z > y + z)
    500a. |- revoke 100a.
    600a. |- (x > y)


/*
In the cases 2 and 3 the proofs are anologous.
*/

    100b. |- assume ((x + z = y + z) and not (x = y)) // Let x
    200b. Theorem_010 |- (x < y or x > y)
    300b. Theorem_019 |- (x + z < y + z or x + z > y + z)
    400b. Theorem_010 |- not (x + z = y + z)
    500b. |- revoke 100b.
    600b. |- (x = y)

    100c. |- assume ((x + z < y + z) and not (x < y)) // Let x
    200c. Theorem_010 |- (x > y or x = y)
    300c. Theorem_019 |- (x + z > y + z or x + z = y + z)
    400c. Theorem_010 |- not (x + z < y + z)
    500c. |- revoke 100c.
    600c. |- (x < y)
    qed

}
;
