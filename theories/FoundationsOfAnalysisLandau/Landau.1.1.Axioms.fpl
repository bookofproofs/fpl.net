
definition class One: object
{
    intrinsic
}

// introduction of new symbols 1,2,3,.... and identyfying then with natural numbers of 
def class N: obj
{
    // explicit representation of a specific natural number
    ctor N(x: @Digits)
    {
        dec
            cases
            (
                | <x = 1> : self := One() 
                | <x = 2> : self := Succ(One()) 
                | <x = 3> : self := Succ(Succ(One())) 
                ? self := Succ(delegate.decrement(x))  
            )
        ;
        self
    }
}

// 1 is a natural number
axiom Axiom1 ()
{
    is (1, N) 
}

definition function Successor(x: N) -> N
{
    intrinsic
}


// For each x there exists exactly one natural number, called the successor of x, the will be denoted x
axiom Axiom2 ()
{
    all x in N
    (
        exn!1 y in N
        (
            < y = Successor(x) > 
        )
    )
}

// It follows immediately ...
corollary Axiom2!1 ()
{
    dec ~x,y:N ;
    impl
    (
        < x = y > 
        ,
        < Successor(x) = Successor(y) > 
    )
}

// There is no number whose successor is 1.
axiom Axiom3 ()
{
    dec ~x:N ;
    not 
    (
        < Successor(x) = 1 > 
    )
}

// Successor is injective
axiom Axiom4 ()
{
    dec ~x,y:N ;
    impl
    (
        < Successor(x) = Successor(y) >, 
        < x = y >
    )
}

// Axiom of Induction:
// Note: Landau's original axiom declaration is based on set-theory that we do no want to imply here.
// Therefore, our axiom definition is a little different and relays only on the syntax of FPL, not the semantics of set theory   
axiom Axiom5 () 
{
    all p in predicate // For all predicates p it holds that:
    (
        impl
        (
            // if 
            and 
            ( 
                p(One) // a predicate p is true for One 
                , // and 
                all x in object  // and for all objects x (kind of which is whatsoever) 
                ( 
                    impl 
                    ( 
                        p(x), // the truth of p for x implies
                        p(Successor(x)) // the truth of p also for x's successor
                    ) 
                )
            )
            , // then, p is actually true for all natural numbers
            all n in N 
            ( 
                p(n) 
            )
        )
    )
    // This means that our (whatsoever objects) are actually the natural numbers themselves.
}

;