Fpl.Algebra.Structures
{
    uses Fpl.Commons, Fpl.SetTheory.ZermeloFraenkel

    theory
    {

        /* Binary operation. Note that the generic type "tplSetElem" limits a Binary operation to be closed
           inside a type, however, it still might be not closed inside a particular set of elements of this type.
           we will therefore need another predicate to ensure, but defining it will require the the context
           of a particular set. It is, therefore, not possible to define the closure for a binary operation without this
           broader context. */
        func BinOp(x,y: tplSetElem) -> tplSetElem
        {
            intr
            optional pred IsAssociative()
            {
                dec:
                    a,b,c: tplSetElem
                ;
                all a,b,c
                (
                    Equal
                    (
                        @self(a,@self(b,c)),
                        @self(@self(a,b),c)
                    )
                )
            }

            optional pred IsCommutative()
            {
                dec: a,b: tplSetElem;
                all a,b
                (
                    Equal
                    (
                        @self(a,b),
                        @self(b,a)
                    )
                )
            }

            optional pred IsLeftNeutralElement(e: tplSetElem)
            {
                Equal(@self(e,x), x)
            }

            optional pred IsRightNeutralElement(e: tplSetElem)
            {
                Equal(@self(x,e), x)
            }

            optional pred IsNeutralElement(e: tplSetElem)
            {
                and (IsLeftNeutralElement(e), IsRightNeutralElement(e))
            }

            optional pred HasLeftNeutralElement()
            {
                dec: e: tplSetElem;
                ex e
                (
                    IsLeftNeutralElement(e)
                )
            }

            optional pred HasRightNeutralElement()
            {
                dec: e: tplSetElem;
                ex e
                (
                    IsRightNeutralElement(e)
                )
            }

            optional pred HasNeutralElement()
            {
                dec: e: tplSetElem;
                ex e
                (
                    IsNeutralElement(e)
                )
            }

            optional tplSetElem LeftNeutralElement()
            {
                spec: assert IsLeftNeutralElement(self);
                self
            }

            optional tplSetElem RightNeutralElement()
            {
                spec: assert IsRightNeutralElement(self);
                self
            }

            optional tplSetElem NeutralElement()
            {
                spec: assert IsNeutralElement(self);
                self
            }

        }

        func Composition(operands:* tplSetElem) -> tplSetElem
        {
            intrinsic
        }

        /* an algebraic structure is derived from a set type with at least one binary operation
           defined on its set elements ("BinOp +ops" stands for one or more operands of type BinOp).
           Since tplSet and tplSetElem are independent from each other, we will have to ensure the closure of each of
           them inside the set x of type tplSet. */
        class AlgebraicStructure: obj
        {

            dec:
                myCarrierSet: tplSet
                myOps:+ Composition(myElem:* tplSetElem)
            ;

            AlgebraicStructure(x: tplSet, ops:+ Composition(args:* tplSetElem))
            {
                dec:
                    a: obj
                    arg: index
                ;
                spec:
                    myOps := ops
                    myCarrierSet := x

                    // Assert that all types used in the declaration of AlgebraicStructure
                    // can be treated like they were sets, even if they are not derived from the type "Set" in their original
                    // definition! This, means that the In predicate has a non-transitive model
                    // this is comparable to implementing an interface (or comparable to multiple inheritance).
                    // The interpreter only asserts the types tplSet, and tplSetElement to be sets
                    assert is (x,Set)
                    for arg in args 
                    (
                        assert is(arg,Set)
                    )

                    assert
                        all a
                        (
                            impl ( is(a,tplSetElem), In(a,myCarrierSet) )
                        )
                    self!obj()
                ;
                self

            }

            mandatory func NthOp(n: index) -> Composition
            {
                return myOps$n
            }

            // Every algebraic structure will have a mandatory property called CarrierSet of type Set.
            mandatory Set CarrierSet()
            {
                self:=myCarrierSet
            }


        }

        // a magma is an algebraic structure with one binary operation defined on it
        // Note how the "constructor" of the base class AlgebraicStructure is called with the arguments x and op
        class Magma: AlgebraicStructure
        {

            Magma(x: tplSet, op: BinOp)
            {
                self!AlgebraicStructure(x,op)
                self
            }
        }

        // a semigroup is a magma whose binary operation is associative using "non-full-qualified" parameters
        class Semigroup: Magma
        {
            Semigroup(x: tplSet, op: BinOp)
            {
                spec: 
                    assert op.IsAssociative()
                ;
                self!Magma(x,op)
                self
            }

        }

        // a monoid is a semigroup whose binary operation has a neutral element
        // we define this element a mandatory property of the monoid.
        // Note how we use "full-qualified" parameters to ensure that the type "tpl" will be of exactly the  same ty
        class Monoid: Semigroup
        {
            dec: myOp: BinOp(a,b: tplSetElem);

            Monoid(x: tplSet, op: BinOp)
            {
                spec: 
                    myOp:=op
                    assert myOp.HasNeutralElement()
                ;
                self!Semigroup(x,op)
                self
            }

            mandatory tplSetElem NeutralElem()
            {
                self:=myOp.NeutralElement()
            }
        }

        // Exponentiation in a monoid
        // Note how we use the Zermelo Fraenkel In predicate to ensure that y is the element of the monoid carrier set x.
        func Exp
            (
            m: Monoid(x: tplSet, op: BinOp(a,b: tplSetElem)),
            y: tplSetElem,
            n: Nat
            ) -> tplSetElem
        {
            dec: result:tplSetElem ;
            spec:
                assert In(y,x)
                    cases
                (
                    case Equal(n,0):
                        result := m.NeutralElem()
                    else:
                        result :=
                            op(
                                y,
                                Exp( m(y,op), y, Sub(n,1))
                            )
                )
            ;
            return result

        }

        // a group is a monoid, in which an inverse element exists for all elements
        class Group: Monoid
        {
            dec: myOp: BinOp(a,b: tplSetElem);

            Group(x: tplSet, op: BinOp)
            {
                spec:
                    myOp:=op
                    self!Monoid (x,op)
                ;
                self
            }

            mandatory pred InverseExistsForAllElements()
            {
                dec: 
                    x1,x2: tplSetElem
                ;
                all x1
                (
                    ex x2
                    (
                        Equal( myOp(x1,x2), self.NeutralElem() )
                    )
                )
            }

            // provides a standard functionality inside a group that "returns" the inverse element to a given element
            // we can refer to this functionality as group.InverseOf(x)
            mandatory func InverseOf(x: tplSetElem) -> tplSetElem
            {
                dec:
                     val: tplSetElem
                ;
                assert
                    and
                    (
                        Equal( myOp(x,val), self.NeutralElem()),
                        Equal( myOp(val,x), self.NeutralElem())
                    )
                ret val
            }
        }

        class CommutativeGroup: Group
        {
            CommutativeGroup(x: tpl, op: BinOp)
            {
                spec:
                    assert op.IsCommutative()
                    self!Group(x,op)
                ;
                self                
            }
        }

        class Ring: AlgebraicStructure
        {
            dec: 
                myX : tpl
                myAdd,myMul : BinOp
            ;

            Ring (
                x: tpl,
                add: BinOp,
                mul: BinOp
            )
            {
                spec: 
                    myX:= x
                    myAdd:=add
                    myMul:=mul
                    self!AlgebraicStructure(x, add, mul)
                ;
                self
            }

			mandatory func Add(a,b:tplElem)->tplElem
			{
				spec:
                    assert and(In(a, myX), In(b, myX))
                ;
				return myAdd(a,b)
			}


            mandatory func Mul(a,b:tplElem)->tplElem
            {
                spec:
                    assert and(In(a, myX), In(b, myX))
                ;
                return myMul(a,b)
            }

            mandatory CommutativeGroup AdditiveGroup()
            {
                return CommutativeGroup(myX, myAdd)
            }

            mandatory Semigroup MultiplicativeSemiGroup()
            {
                return CommutativeGroup(myX, myMul)
            }

            mandatory pred RightDistributive()
            {
                dec: a,b,c: tplElem;
                all a,b,c
                (
                    Equal(
                        myMul(myAdd(a,b),c),
                        myAdd(myMul(a,c),myMul(b,c))
                    )
                )
            }

            mandatory pred LeftDistributive()
            {
                dec: a,b,c: tplElem;
                all a,b,c
                (
                    Equal(
                        myMul(a,myAdd(b,c)),
                        myAdd(myMul(a,b),myMul(a,c))
                    )
                )
            }

            mandatory pred Distributive()
            {
                and
                (
                    RightDistributive(),
                    LeftDistributive()
                )
            }
        }

        class UnitRing: Ring
        {

            UnitRing(x: tpl, add, mul: BinOp)
            {
                spec:
                    self!Ring(x,add,mul)
                ;
                self
            }

            mandatory Monoid MultiplicativeMonoid()
            {
                return Monoid(self.CarrierSet(), self.Mul())
            }
        }

        class CommutativeUnitRing: UnitRing
        {
            CommutativeUnitRing(x: tpl, add, mul: BinOp)
            {
                spec: 
                    assert mul.IsCommutative() 
                    self!UnitRing(x,add,mul)
                ;
                self            
            }
        }

        class Field: CommutativeUnitRing
        {

            Field(x: tpl, add,mul: BinOp)
            {
                spec: 
                    self!CommutativeUnitRing(x,add,mul)
                ;
                self
            }

            mandatory CommutativeGroup MultiplicativeGroup()
            {
                return CommutativeGroup(self.CarrierSet(), self.Mul())
            }

            mandatory pred OneUnequalZero()
            {
                NotEqual(
                    self.AdditiveGroup().NeutralElement(),
                    self.MultiplicativeGroup().NeutralElement()
                )
            }

            mandatory pred CollectElements()
            {
                dec: elem: tplElem;
                all elem
                (
                    and
                    (
                        In(elem, x),
                        is(elem, Set),
                        In(elem, self)
                    )
                )
            }
        }

        // Vector addition
        func AddVec(x,y: tplVector) -> tplVector
        {
        }

        // Scalar Multiplication
        func ScalarMul(x: tplFieldElem, y: tplVector) -> tplVector
        {
        }

        // Vector space over a field
        class VectorSpaceOverField : obj
        {
            dec: 
                mySpace: NonemptySet
                myFieldAdd, myFieldMul: BinOp
                myFieldSet: tplFieldSet
                myScalarMul: ScalarMul 
                myVecAdd: AddVec 
                myField: Field
            ;
            VectorSpaceOverField
                (
                    space: NonemptySet,
                        field: Field
                        (
                            fieldSet: tplFieldSet,
                            fieldAdd: BinOp,
                            fieldMul: BinOp
                        ),
                    vecAdd: AddVec (v,w: tplVector),
                    scalarMul: ScalarMul (a: tplFieldElement,v1: tplVector)
                )
            {
                spec:
                    self!obj()
                    mySpace:= space
                    myFieldAdd:= fieldAdd
                    myFieldMul:= fieldMul
                    myFieldSet:= fieldSet
                    myScalarMul:= scalarMul
                    myVecAdd:=vecAdd
                    myField:= field
                ;
                self
            }


            // vs together with oppAdd is a commutative group,
            // let's call it with the identifier "Space"
            mandatory CommutativeGroup Space()
            {
                self:=CommutativeGroup(mySpace, myFieldAdd)
            }

            mandatory Field MyField()
            {
                self:=myField
            }

            mandatory pred ScalarMulIsRightDistributive()
            {
                dec: 
                    u,w: tplVector
                    a: tplFieldElement
                ;
                
                all u,w,a
                (
                    Equal(
                        myScalarMul(myVecAdd(u,w),a),
                        myVecAdd(myScalarMul(u,a),myScalarMul(w,a))
                    )
                )
            }

            mandatory pred ScalarMulIsLeftDistributive()
            {
                dec: 
                    u,w: tplVector
                    a: tplFieldElement
                ;
                all a,u,w
                (
                    Equal
                    (
                        myScalarMul(a,myVecAdd(u,w)),
                        myVecAdd(myScalarMul(a,u),myScalarMul(a,w))
                    )
                )
            }

            mandatory pred ScalarMulIsIsAssociative()
            {
                dec: 
                    u: tplVector
                    a, b: tplFieldElement
                ;
                all a,b,u
                (
                    Equal
                    (
                        myScalarMul(myFieldMul(a,b),u),
                        myScalarMul(a,myScalarMul(b,u))
                    )
                )
            }

            mandatory pred ScalarMulNorm()
            {
                dec:
                    u: tplVector
                    one: tplFieldElement
                ;
                spec:
                    one := myField.MultiplicativeGroup().NeutralElement()
                ;
                all u
                (
                    Equal( myScalarMul(one,u), u)
                )
            }
        }
   }
}
