:ext
    Digits: /\d+/
:end

uses Fpl.Commons
uses Fpl.SetTheory

def class Zero: obj
{
    intr
}

// definition of a functional term denoting the successor of a natural number
def func Succ(n: Nat) -> Nat
{
    intr
}

axiom ZeroIsNat()
{
    is(Zero,Nat)
}

axiom SuccessorExistsAndIsUnique()
{
    all n in Nat
    {
        exn$1 successor in Nat
        {
            and
            (
                NotEqual(successor,n),
                (successor = Succ(n))
            )
        }
    }
}

axiom ZeroIsNotSuccessor()
{
    all n in Nat
    {
        NotEqual(Zero(), Succ(n))
    }
}

axiom SuccessorIsInjective()
{
    all n,m in Nat
    {
        impl
        (
            ( Succ(n) = Succ(m) ),
            ( n = m )
        )
    }
}

axiom CompleteInduction()
{
    dec 
        ~n: Nat
    ;
    all p is pred
    {
        impl
        (
            and ( p(0), all n { impl ( p(n), p(Succ(n)) ) } ),
            all n { p(n) }
        )
    }
}


// definition of a new mathematical object (natural number)
def class Nat: obj
{
    ctor Nat(x: @Digits)
    {
        dec
            cases
            (
                | (x = 0) : self := Zero() 
                | (x = 1) : self := Succ(Zero()) 
                | (x = 2) : self := Succ(Succ(Zero())) 
                ? self := Succ(delegate.decrement(x))  
            )
        ;
        self
    }

    ctor Nat(x: Int)
    {
        dec
            cases
            (
                | IsGreaterOrEqual(x.RightMember(), x.LeftMember()): self:=x.RightMember()
                ? self:=undefined
            )
            base.obj()
        ;
        self
    }
}

def pred IsGreaterOrEqual(n,m: Nat)
{
    ex k in Nat { (n = Add(m,k)) }
}

// besides the class "Nat", we can formulate definition of the set of all natural numbers
def class SetNat: Set
{
    ctor SetNat()
    {
        dec 
            ~n: Nat
            // Assert that elements of class "Nat" can be collected to a bigger object of class "SetNat"
            // This requires that we can apply the "In" predicate defined in Fpl.Set.ZermeloFraenkel
            // to object of the class "Nat". This becomes possible when we assert that every variable of the class
            // "Nat" is a also Set.
            // This is comparable to implementing an interface (or comparable to multiple inheritance).
            assert
                all n
                {
                    and
                    (
                        is(n, Set),
                        In(n, self)
                    )
                }
            base.Set()
        ;
        self
    }
}

// Addition of natural numbers
def func Add(n,m: Nat)->Nat
{
    dec
        ~result, k: Nat
        cases
        (
            | (m = 0): result:= n
            | (Succ(m) = k): result:= Succ(Add(n,k))
            ? result:= undef
        )
    ;
    return result
}

def func Add(n,m: @Decimal)->Nat
{
    return delegate.add(n,m)
}


prop AddIsUnique(op: Add)
{
    dec
        ~n,m: Nat
        ~anotherAdd: Add
    ;
    impl
    (
        and
        (
            ( op(n,0) = n ),
            ( anotherAdd(n,0) = n ),
            ( op(n,Succ(m)) = Succ(op(n,m)) ),
            ( anotherAdd(n,Succ(m)) = Succ(anotherAdd(n,m)) )
        )
        ,
        all n, m
        {
            ( op(n,m) = anotherAdd(n,m) )
        }
    )
    
}

proof AddIsUnique$1
{
    1. |- assume 
        and
        (
            ( op(n,0) = n ),
            ( anotherAdd(n,0) = n ),
            ( op(n,Succ(m)) = Succ(op(n,m)) ),
            ( anotherAdd(n,Succ(m)) = Succ(anotherAdd(n,m)) )
        )
    2. |- trivial
    3. |- all n, m
            {
                ( op(n,m) = anotherAdd(n,m) )
            }
}


def func Sum(list:* Nat)->Nat
{
    dec 
        ~result, addend: Nat
        result:=Zero()
        for addend in list
        {
            result:=Add(result,addend)
        }
    ;
    return result
}

def func Sum2(list:* Nat)->Nat
{
    dec
        ~i: index
        result:=Zero()
        for i in list
        {
            result:=Add(result,list[i])
        }
    ; 
    return result
}

def func Sum(arr: Nat[from,to:Nat]) -> Nat
{
    dec
        ~i, result: Nat
        result:=Zero()

        for i in Range(from,to)
        {
            result:=Add(result,arr[i])
        }
    ;
    return result
}

def func Sum(arr: Nat) -> Nat
{
    dec
        ~addend, result: Nat
        result:=Zero()
        for addend in arr
        {
            result:=Add(result,addend)
        }
    ;
    return result
}

def func Addend(a: Nat)->Nat
{
    intr
}

def func Sum(from,to:Nat, addend: Addend) -> Nat
{
    dec
        ~i, result: Nat
        result:=Zero()
        for i in Range(from,to)
        {
            result:=Add(result,addend(i))
        }
    ;
    return result
}

proposition SumOfConsecutiveNumbers()
{
    dec
        ~n, limit: Nat
        ~f: Addend
    ;
    impl
    (
        all n in Range(1,limit)
        {
            (f(n) = n)
        }
        ,
        all n
        {
            (Sum(1,n,f) = Div(Mul(n,Succ(n)),2))
        }
    )
}

def func RealValuedFunction(x:Real) -> Real
{
    dec
        assert is(self,Function)
    ;
    return self
}

def pred IsBounded(x: Real)
{
    ex upperBound, lowerBound is Real
    {
        and (LowerEqual(x,upperBound), LowerEqual(lowerBound,x))
    }
}

def pred IsBounded(f: RealValuedFunction)
{
    all x in Real
    {
        IsBounded(f(x))
    }
}

def func RiemannIntegral(from,to:Real, f: RealValuedFunction ) -> Real
{
    dec
        ~x, result: Real
        assert IsBounded(f)
        result:=ZeroReal()
        for x in Range(from,to)
        {
            result:=Add(result, Mult(f(x), D(x)))
        }
    ;
    return result
}

def func PowerSeries(arr: RightOpenRange[k:Nat]) -> Real
{
    dec
        ~result: Real
        ~i: Nat
        result:=ZeroReal()
        for i in RightOpenRange(k)
        {
            result:=Add(result, Exp(arr[i],i))
        }
    ;
    return result
}

def function ContinuedFraction(arr: RightOpenRangeInt[k:Nat]) -> Real
{
    dec
        ~i: Nat
        ~cf: Real
        cf:=Real(arr[k])
        i:=Succ(k)
    ;
    return Add( cf, Div(1 , ContinuedFraction(i, RightOpenRange[arr[i]])))
}

// Example of defining a constant for the natural number 100 using the
def class N100:Set{ctor N100(){dec ~n:Nat  base.Set() self:=SetBuilder(SetNat(),IsGreater(n,100)); self }}

;