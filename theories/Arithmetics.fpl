Fpl.Arithmetics 
{
    /* This is a formulation of Edmund Landau's "Foundations of Analysis" (1930 Leipzig) in FPL (the Formal Proving Language).
    The namespace serves as a "proof of concept" for the language. */


    /* 1. AXIOMS */

    definition class N: object
    {
        intrinsic
    }
    
    
    definition class One: object
    {
        intrinsic
    }
    
    
    // 1 is a natural number
    axiom Axiom1 ()
    {
        is (One, N) 
    }
    
    definition function Successor(x: N) -> N
    {
        intrinsic
    }
    
    
    // For each x there exists exactly one natural number, called the successor of x, the will be denoted x
    axiom Axiom2 ()
    {
        all x in N
        (
            exn!1 y in N
            (
                < y = Successor(x) > 
            )
        )
    }
    
    // There is no number whose successor is 1.
    axiom Axiom3 ()
    {
        all x in N
        (
            not 
            (
                < Successor(x) = One > 
            )
        )
    }
    
    // Successor is injective
    axiom Axiom4 ()
    {
        all x,y in N
        (
            impl
            (
                < Successor(x) = Successor(y) >, 
                < x = y >
            )
        )
    }
    
    // Axiom of Induction: 
    axiom Axiom5 () 
    {
        all p in pred // For all predicates p it holds that:
        (
            impl
            (
                // if 
                and 
                ( 
                    p(One),  // a predicate p is true for One 
                    all x in object  // and for all objects x (kind of which is whatsoever) 
                    ( 
                        impl 
                        ( 
                            p(x), // the truth of p for x implies
                            p(Successor(x)) // the truth of p also for x's successor
                        ) 
                    )
                ),
                all n in N // then, p is actually true for all natural numbers
                ( 
                    p(n) 
                )
            )
        )
        // This means that our (whatsoever objects) are actually the natural numbers themselves.
    }
    

    /* 2. ADDITION */
    
    theorem Theorem1()
    {
        premise: premise
        conclusion:
            all x,y in N
            (
                impl
                (
                    not ( < x = y > ),
                    not ( < Successor(x) = Successor(y) > )
                )
            )
    }
    
    
    
    
}