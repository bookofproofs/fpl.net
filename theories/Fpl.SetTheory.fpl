uses Fpl.Commons

def class Set: obj
{
    intr
}

// "in relation" ("is element of") relation
def pred In(x,y: Set)
{
    intr
}

def pred IsEmpty(x: Set)
{
    all y in Set
    (
        not ( In(y, x) )
    )
}

// existence of an empty set
axiom EmptySetExists()
{
    ex x in Set
    (
        IsEmpty(x)
    )
}

// introduction of a new mathematical object
def class EmptySet: Set
{
    ctor EmptySet()
    {
        dec 
            base.obj()
            assert IsEmpty(self) 
        ;
        self
    }
}

// relation between a subset and a superset
def pred IsSubset(subset,superset: Set)
{
    all u in Set
    (
        impl (In(u, subset), In(u, superset))
    )
}

// introduction of a new mathematical object that is a subset of a superset
def class Subset: Set
{
    ctor Subset(superSet: Set)
    {
        dec
            base.Set()
            assert IsSubset(self, superSet)
        ;
        self
    }
}

// extensionality
axiom Extensionality()
{
    all x,y in Set
    (
        impl
        (
            and
            (
                IsSubset(x,y),
                IsSubset(y,x)
            ),
            ( x = y )
        )
    )
}

// adds Roster notation capability to this theory
def class SetRoster: Set
{
    // to support enumerating set elements, e.g. SetRoster(1,2,3)
    ctor SetRoster(listOfSets:* Set)
    {
        dec 
            ~elem: Set
            base.Set()
            for elem in listOfSets
            (
                assert In(elem, self)
            )
        ;
        self
    }

}

// Schema of separation axioms
axiom SchemaSeparation()
{
    dec
        ~p: pred
        ~x,y: Set
    ;
    all p, x
    (
        ex y
        (
            ( y = SetBuilder(x,p) )
        )
    )
}

// adds set-builder notation capability to this theory
// pred p indicates that p is a predicate, in which the variable u is bound and the type of u is Set
// moreover, p can accept even more bound variables of any type.
def class SetBuilder: Set
{
    // to support set builder notation, ex. all "even" natural numbers like SetBuilder(n: Nat, Even(n))
    ctor SetBuilder(x: Set, p: pred(u: Set, o:* obj))
    {
        dec
        assert
            all u
            (
                iif
                (
                    In(u,self),
                    and ( In(u,x), p(u,o) )
                )
            )
        ;
        self
    }
}

// For any two sets $x,y$ there exists a set $z$ containing them as elements.
axiom Pairing()
{
    all x,y in Set
    (
        ex z in Set
        (
            all w in Set
            (
                iif
                (
                    In(w,z),
                    or
                    (
                        ( w = x ),
                        ( w = y )
                    )
                )
            )
        )
    )
}

// for every set x there is a set containing all elements of the elements of x
axiom Union()
{
    all x in Set
    (
        ex y in Set
        (
            all z,w in Set
            (
                impl
                (
                    and (In(z,w), In(w,x)),
                    In (z,y)
                )
            )
        )
    )
}

def pred IsPowerSet(ofSet, potentialPowerSet: Set)
{
    all z in Set
    (
        impl (Subset(z,ofSet), In(z, potentialPowerSet))
    )
}

// including the PowerSet function
def func PowerSet(x: Set) -> Set
{
    dec 
        ~y: Set
        assert IsPowerSet(x,y)
    ;
    return y
}

// for every set x there is a set y containing all subsets of x as its elements
axiom PowerSetExistsForAllSets()
{
    all x in Set
    (
        ex y in Set
        (
            IsPowerSet(x, y)
        )
    )
}

// introducing a set union function
def func SetUnion(x,y: Set) -> Set
{
    dec 
        ~union: Set
        assert
            all z in Set
            (
                iif
                (
                    or (In(z,x), In(z,y)),
                    In(z,union)
                )
            )
    ;
    return union
}

// introducing a singleton function
def func Singleton(x: Set) -> Set
{
    return SetRoster(x)
}

// alternative 2: adds SetUnion notation capability to this theory (as predicate)
def pred Union(x,superSet: Set)
{
    all u in Set
    (
        impl (In(u, x), In(u, superSet))
    )
}

;