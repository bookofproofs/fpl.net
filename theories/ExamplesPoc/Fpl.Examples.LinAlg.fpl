uses Fpl.Commons 
uses Fpl.Commons.Structures 
uses Fpl.SetTheory
uses Fpl.Examples.Algebra.Structures 


def class FieldPowerN: Set
{
    dec
        ~myField: Field  
        ~addInField: BinOp 
        ~mulInField: BinOp 
    ;

    ctor FieldPowerN
    (
        field : Field, 
        n: Nat 
    )
    {
        dec 
            myField := field 
            addInField := myField.AddOp()
            mulInField := myField.MulOp()
            assert NotEqual(n, Zero())
            self:=SetBuilder( myField[1 , n], true)
            base.Set()
        ;
        self

    }

    property func VecAdd(v,w: tplFieldElem[from , to:Nat])   -> tplFieldElem[from , to:Nat]
    {
        dec
            ~result: tplFieldElem[from , to:Nat] 
            result := addInField(v[from , to],w[from , to])
        ;
        return result
    }

}


lemma VecAddIsCommutative()
{
    dec
        ~x,y: tplFieldElem[from,to:Nat]
        ~fieldPowerN: FieldPowerN(
            field: Field(f: tplFieldSet, opAdd, opMul: BinOp(a,b: tplFieldElem)),
            n:Nat
            )
        ~vecAdd: VecAdd(v,w: tplFieldElem[from,to:Nat])
    ;
    impl
    (
        and ( In(x, fieldPowerN), In(y, fieldPowerN) )
        ,
        vecAdd.IsCommutative()
    )
}

def class ZeroVectorN: Tuple
{
    ctor ZeroVectorN(n: Nat, field: Field)
    {
        dec
            ~i: Nat 
            for i in Range(1,n) 
            {
                self[i]:=field.AdditiveGroup().NeutralElement()
            }
            base.Tuple()
        ;
        self
    }
}
    
;