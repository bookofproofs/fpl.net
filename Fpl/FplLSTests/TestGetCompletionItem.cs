namespace FplLSTests
{
    [TestClass]
    public class TestFplAutoCompleteService
    {
        [TestMethod]
        [DataRow("<some token>", "some token")]
        [DataRow("'token'", "token")]
        [DataRow("some token", "some token")]
        [DataRow("token", "token")]
        [DataRow("'token", "'token")]
        [DataRow("token'", "token'")]
        [DataRow("<token", "<token")]
        [DataRow("token>", "token>")]
        public void TestGetCompletionItemStippingBracketsAndQuotes(string input, string expected)
        {
            var actual = FplAutoCompleteService.GetCompletionItem(input);
            Assert.AreEqual(expected, actual.Label);
        }

        [TestMethod]
        [DataRow("ax", "axiom (short form)")]
        [DataRow("post", "postulate (short form)")]
        [DataRow("thm", "theorem (short form)")]
        [DataRow("lem", "lemma (short form)")]
        [DataRow("prop", "proposition (short form)")]
        [DataRow("cor", "corollary (short form)")]
        [DataRow("ass", "assume (short form)")]
        [DataRow("cl", "class (short form)")]
        [DataRow("conj", "conjecture (short form)")]
        [DataRow("con", "conclusion (short form)")]
        [DataRow("ctr", "constructor (short form)")]
        [DataRow("dec", "declaration (short form)")]
        [DataRow("def", "definition (short form)")]
        [DataRow("del", "delegate (short form)")]
        [DataRow("func", "type (functional term, short form)")]
        [DataRow("ind", "type (index, short form)")]
        [DataRow("intr", "intrinsic (short form)")]
        [DataRow("inf", "rule of inference (short form)")]
        [DataRow("loc", "localization (short form)")]
        [DataRow("mand", "mandatory (short form)")]
        [DataRow("obj", "type (object, short form)")]
        [DataRow("opt", "optional (short form)")]
        [DataRow("pred", "type (predicate, short form)")]
        [DataRow("pre", "premise (short form)")]
        [DataRow("prf", "proof (short form)")]
        [DataRow("ret", "return (short form)")]
        [DataRow("rev", "revoke (short form)")]
        [DataRow("undef", "undefined (short form)")]
        public void TestGetDetailShortForms(string input, string expected)
        {
            var actual = FplAutoCompleteService.GetDetail(input, out string sortText);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        [DataRow("axiom", "axiom")]
        [DataRow("postulate", "postulate")]
        [DataRow("theorem", "theorem")]
        [DataRow("lemma", "lemma")]
        [DataRow("proposition", "proposition")]
        [DataRow("corollary", "corollary")]
        [DataRow("assume", "assume")]
        [DataRow("class", "class")]
        [DataRow("conjecture", "conjecture")]
        [DataRow("conclusion", "conclusion")]
        [DataRow("constructor", "constructor")]
        [DataRow("declaration", "declaration")]
        [DataRow("definition", "definition")]
        [DataRow("delegate", "delegate")]
        [DataRow("function", "type (functional term)")]
        [DataRow("index", "type (index)")]
        [DataRow("intrinsic", "intrinsic")]
        [DataRow("inference", "rule of inference")]
        [DataRow("localization", "localization")]
        [DataRow("mandatory", "mandatory")]
        [DataRow("object", "type (object)")]
        [DataRow("optional", "optional")]
        [DataRow("predicate", "type (predicate)")]
        [DataRow("premise", "premise")]
        [DataRow("proof", "proof")]
        [DataRow("return", "return")]
        [DataRow("revoke", "revoke")]
        [DataRow("undefined", "undefined")]
        public void TestGetDetailLongForms(string input, string expected)
        {
            var actual = FplAutoCompleteService.GetDetail(input, out string sortText);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        [DataRow("ax", "axiom")]
        [DataRow("axiom", "axiom")]
        [DataRow("post", "postulate")]
        [DataRow("postulate", "postulate")]
        [DataRow("thm", "theorem")]
        [DataRow("theorem", "theorem")]
        [DataRow("lem", "lemma")]
        [DataRow("lemma", "lemma")]
        [DataRow("prop", "proposition")]
        [DataRow("proposition", "proposition")]
        [DataRow("cor", "corollary")]
        [DataRow("corollary", "corollary")]
        [DataRow("ass", "assume")]
        [DataRow("assume", "assume")]
        [DataRow("cl", "class")]
        [DataRow("class", "class")]
        [DataRow("conj", "conjecture")]
        [DataRow("conjecture", "conjecture")]
        [DataRow("con", "conclusion")]
        [DataRow("conclusion", "conclusion")]
        [DataRow("ctr", "constructor")]
        [DataRow("constructor", "constructor")]
        [DataRow("dec", "declaration")]
        [DataRow("declaration", "declaration")]
        [DataRow("def", "definition")]
        [DataRow("definition", "definition")]
        [DataRow("del", "delegate")]
        [DataRow("delegate", "delegate")]
        [DataRow("func", "function")]
        [DataRow("function", "function")]
        [DataRow("ind", "index")]
        [DataRow("index", "index")]
        [DataRow("intr", "intrinsic")]
        [DataRow("intrinsic", "intrinsic")]
        [DataRow("inf", "inference")]
        [DataRow("inference", "inference")]
        [DataRow("loc", "localization")]
        [DataRow("localization", "localization")]
        [DataRow("mand", "mandatory")]
        [DataRow("mandatory", "mandatory")]
        [DataRow("obj", "object")]
        [DataRow("object", "object")]
        [DataRow("opt", "optional")]
        [DataRow("optional", "optional")]
        [DataRow("pred", "predicate")]
        [DataRow("predicate", "predicate")]
        [DataRow("pre", "premise")]
        [DataRow("premise", "premise")]
        [DataRow("prf", "proof")]
        [DataRow("proof", "proof")]
        [DataRow("ret", "return")]
        [DataRow("return", "return")]
        [DataRow("rev", "revoke")]
        [DataRow("revoke", "revoke")]
        [DataRow("undef", "undefined")]
        [DataRow("undefined", "undefined")]
        public void TestGetDetailSortTexts(string input, string expected)
        {
            var actual = FplAutoCompleteService.GetDetail(input, out string sortText);
            Assert.AreEqual(expected, sortText);
        }
    }
}
