namespace FplInterpreter.Tests
open System.IO
open Microsoft.VisualStudio.TestTools.UnitTesting
open FParsec
open ErrDiagnostics
open FplInterpreterTypes
open CommonTestHelpers

[<TestClass>]
type TestFplValue() =

    [<TestMethod>]
    member this.TestInitialFactory() =
        ad.Clear()
        let r = FplValue.CreateRoot()
        Assert.AreEqual<FplValueType>(FplValueType.Root, r.BlockType)
        let testCreateFactory fplBlockType = 
            if fplBlockType = FplValueType.Object then
                ("obj", FplValue.CreateObject(Position("",0,1,1),Position("",0,1,1)))
            else
                ("", FplValue.CreateFplValue((Position("",0,1,1),Position("",0,1,1)), fplBlockType, r))
        let testFactory fplBlockType (repr:FplRepresentation) =
            let name, fv = testCreateFactory fplBlockType
            Assert.AreEqual<FplValueType>(fplBlockType, fv.BlockType)
            Assert.AreEqual<string>(name, fv.Type(false))
            Assert.AreEqual<FplRepresentation>(repr, fv.FplRepresentation)
            Assert.AreEqual<string>("", fv.Type(true))
        testFactory FplValueType.VariadicVariableMany FplRepresentation.Undef
        testFactory FplValueType.VariadicVariableMany1 FplRepresentation.Undef 
        testFactory FplValueType.Axiom (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Theorem (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Lemma (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Proposition (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Corollary (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Conjecture (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Quantor (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Proof (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.RuleOfInference (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Predicate (FplRepresentation.PredRepr FplPredicate.Undetermined)
        testFactory FplValueType.Object (FplRepresentation.ObjRepr "obj")
        testFactory FplValueType.Constructor (FplRepresentation.ObjRepr "obj")
        testFactory FplValueType.Theory FplRepresentation.Undef
        testFactory FplValueType.FunctionalTerm FplRepresentation.Undef
        testFactory FplValueType.Variable FplRepresentation.Undef
        testFactory FplValueType.MandatoryFunctionalTerm FplRepresentation.Undef
        testFactory FplValueType.OptionalFunctionalTerm FplRepresentation.Undef
        testFactory FplValueType.MandatoryPredicate FplRepresentation.Undef
        testFactory FplValueType.OptionalPredicate FplRepresentation.Undef
        testFactory FplValueType.Class (FplRepresentation.LangRepr FplLanguageConstruct.Class)


    [<DataRow("inference TestId() {pre: true con: true};", "TestId()")>]
    [<DataRow("inference TestId(x:ind) {pre: true con: true};", "TestId(ind)")>]
    [<DataRow("inference TestId(x:pred) {pre: true con: true};", "TestId(pred)")>]
    [<DataRow("inference TestId(x:func) {pre: true con: true};", "TestId(func)")>]
    [<DataRow("inference TestId(x:obj) {pre: true con: true};", "TestId(obj)")>]
    [<DataRow("inference TestId(x:index) {pre: true con: true};", "TestId(ind)")>]
    [<DataRow("inference TestId(x:predicate) {pre: true con: true};", "TestId(pred)")>]
    [<DataRow("inference TestId(x:function) {pre: true con: true};", "TestId(func)")>]
    [<DataRow("inference TestId(x:object) {pre: true con: true};", "TestId(obj)")>]
    [<DataRow("inference TestId(x:Nat) {pre: true con: true};", "TestId(Nat)")>]
    [<DataRow("inference TestId(x:@Nat) {pre: true con: true};", "TestId(@Nat)")>]
    [<DataRow("inference TestId(x:tpl) {pre: true con: true};", "TestId(tpl)")>]
    [<DataRow("inference TestId(x:template) {pre: true con: true};", "TestId(template)")>]
    [<DataRow("inference TestId(x:tplTest) {pre: true con: true};", "TestId(tplTest)")>]
    [<DataRow("inference TestId(x:templateTest) {pre: true con: true};", "TestId(templateTest)")>]
    [<DataRow("inference TestId(x,y,z:obj) {pre: true con: true};", "TestId(obj, obj, obj)")>]
    [<DataRow("inference TestId(x,y:pred(z:obj)) {pre: true con: true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("inference TestId(x,y:pred(u,v,w:obj)) {pre: true con: true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("inference TestId(x:func(u:obj)->Nat) {pre: true con: true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("inference TestId(x:obj(y:@Nat)) {pre: true con: true};", "TestId(obj(@Nat))")>]
    [<DataRow("inference TestId(x:obj(y:Nat)) {pre: true con: true};", "TestId(obj(Nat))")>]
    [<DataRow("inference TestId(x:obj(y:Test.Nat)) {pre: true con: true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("inference TestId(x:obj(y:index)) {pre: true con: true};", "TestId(obj(ind))")>]
    [<DataRow("inference TestId(x:obj(y:ind)) {pre: true con: true};", "TestId(obj(ind))")>]
    [<DataRow("inference TestId(x:obj(y:tpl)) {pre: true con: true};", "TestId(obj(tpl))")>]
    [<DataRow("inference TestId(x:obj(y:template)) {pre: true con: true};", "TestId(obj(template))")>]
    [<DataRow("inference TestId(x:obj(y:tplTest)) {pre: true con: true};", "TestId(obj(tplTest))")>]
    [<DataRow("inference TestId(x:obj(y:templateTest)) {pre: true con: true};", "TestId(obj(templateTest))")>]
    [<DataRow("inference TestId(x:obj(y:Nat,z:templateTest)) {pre: true con: true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("inference TestId(x:obj(y:index,z:Nat)) {pre: true con: true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("inference TestId(x:obj(y:obj,z:@Nat)) {pre: true con: true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("inference TestId(x:obj(y:tpl,z:index)) {pre: true con: true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("inference TestId(x:*ind) {pre: true con: true};", "TestId(*ind)")>]
    [<DataRow("inference TestId(x:+pred) {pre: true con: true};", "TestId(+pred)")>]
    [<DataRow("inference TestId(x:*func) {pre: true con: true};", "TestId(*func)")>]
    [<DataRow("inference TestId(x:+obj) {pre: true con: true};", "TestId(+obj)")>]
    [<DataRow("inference TestId(x:+index) {pre: true con: true};", "TestId(+ind)")>]
    [<DataRow("inference TestId(x:*predicate) {pre: true con: true};", "TestId(*pred)")>]
    [<DataRow("inference TestId(x:+function) {pre: true con: true};", "TestId(+func)")>]
    [<DataRow("inference TestId(x:*object) {pre: true con: true};", "TestId(*obj)")>]
    [<DataRow("inference TestId(x:+Nat) {pre: true con: true};", "TestId(+Nat)")>]
    [<DataRow("inference TestId(x:*@Nat) {pre: true con: true};", "TestId(*@Nat)")>]
    [<DataRow("inference TestId(x:*tpl) {pre: true con: true};", "TestId(*tpl)")>]
    [<DataRow("inference TestId(x:+template) {pre: true con: true};", "TestId(+template)")>]
    [<DataRow("inference TestId(x:*tplTest) {pre: true con: true};", "TestId(*tplTest)")>]
    [<DataRow("inference TestId(x:+templateTest) {pre: true con: true};", "TestId(+templateTest)")>]
    [<DataRow("inference TestId(x,y,z:+obj) {pre: true con: true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("inference TestId(x,y:+pred(z:obj)) {pre: true con: true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("inference TestId(x,y:pred(u,v,w:*obj)) {pre: true con: true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("inference TestId(x:func(u:+obj)->Nat) {pre: true con: true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("inference TestId(x:obj(y:*@Nat)) {pre: true con: true};", "TestId(obj(*@Nat))")>]
    [<DataRow("inference TestId(x:obj(y:+Nat)) {pre: true con: true};", "TestId(obj(+Nat))")>]
    [<DataRow("inference TestId(x:+obj(y:+Test.Nat)) {pre: true con: true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("inference TestId(x:+obj(y:*index)) {pre: true con: true};", "TestId(+obj(*ind))")>]
    [<DataRow("inference TestId(x:*obj(y:+ind)) {pre: true con: true};", "TestId(*obj(+ind))")>]
    [<DataRow("inference TestId(x:+obj(y:*tpl)) {pre: true con: true};", "TestId(+obj(*tpl))")>]
    [<DataRow("inference TestId(x:+obj(y:*template)) {pre: true con: true};", "TestId(+obj(*template))")>]
    [<DataRow("inference TestId(x:*obj(y:+tplTest)) {pre: true con: true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("inference TestId(x:*obj(y:*templateTest)) {pre: true con: true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("inference TestId(x:+obj(y:Nat,z:+templateTest)) {pre: true con: true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("inference TestId(x:+obj(y:index,z:*Nat)) {pre: true con: true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("inference TestId(x:*obj(y:*obj,z:+@Nat)) {pre: true con: true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("inference TestId(x:*obj(y:+tpl,z:index)) {pre: true con: true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("axiom TestId() {true};", "TestId()")>]
    [<DataRow("axiom TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("axiom TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("axiom TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("axiom TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("axiom TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("axiom TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("axiom TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("axiom TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("axiom TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("axiom TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("axiom TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("axiom TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("axiom TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("axiom TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("axiom TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("axiom TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("axiom TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("axiom TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("axiom TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("axiom TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("axiom TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("axiom TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("axiom TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("axiom TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("axiom TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("axiom TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("axiom TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("axiom TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("axiom TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("axiom TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("axiom TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("axiom TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("axiom TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("axiom TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("axiom TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("axiom TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("axiom TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("axiom TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("axiom TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("axiom TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("axiom TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("axiom TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("axiom TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("axiom TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("axiom TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("axiom TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("axiom TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("axiom TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("axiom TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("axiom TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("axiom TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("axiom TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("axiom TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("axiom TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("axiom TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("axiom TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("axiom TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("postulate TestId() {true};", "TestId()")>]
    [<DataRow("postulate TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("postulate TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("postulate TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("postulate TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("postulate TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("postulate TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("postulate TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("postulate TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("postulate TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("postulate TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("postulate TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("postulate TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("postulate TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("postulate TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("postulate TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("postulate TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("postulate TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("postulate TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("postulate TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("postulate TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("postulate TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("postulate TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("postulate TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("postulate TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("postulate TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("postulate TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("postulate TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("postulate TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("postulate TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("postulate TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("postulate TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("postulate TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("postulate TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("postulate TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("postulate TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("postulate TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("postulate TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("postulate TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("postulate TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("postulate TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("postulate TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("postulate TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("postulate TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("postulate TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("postulate TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("postulate TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("postulate TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("postulate TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("postulate TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("postulate TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("postulate TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("postulate TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("postulate TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("postulate TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("postulate TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("postulate TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("postulate TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("theorem TestId() {true};", "TestId()")>]
    [<DataRow("theorem TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("theorem TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("theorem TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("theorem TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("theorem TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("theorem TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("theorem TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("theorem TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("theorem TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("theorem TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("theorem TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("theorem TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("theorem TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("theorem TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("theorem TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("theorem TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("theorem TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("theorem TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("theorem TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("theorem TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("theorem TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("theorem TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("theorem TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("theorem TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("theorem TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("theorem TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("theorem TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("theorem TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("theorem TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("theorem TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("theorem TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("theorem TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("theorem TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("theorem TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("theorem TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("theorem TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("theorem TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("theorem TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("theorem TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("theorem TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("theorem TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("theorem TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("theorem TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("theorem TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("theorem TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("theorem TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("theorem TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("theorem TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("theorem TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("theorem TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("theorem TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("theorem TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("theorem TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("theorem TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("theorem TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("theorem TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("theorem TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("lemma TestId() {true};", "TestId()")>]
    [<DataRow("lemma TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("lemma TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("lemma TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("lemma TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("lemma TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("lemma TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("lemma TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("lemma TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("lemma TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("lemma TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("lemma TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("lemma TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("lemma TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("lemma TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("lemma TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("lemma TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("lemma TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("lemma TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("lemma TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("lemma TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("lemma TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("lemma TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("lemma TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("lemma TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("lemma TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("lemma TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("lemma TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("lemma TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("lemma TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("lemma TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("lemma TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("lemma TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("lemma TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("lemma TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("lemma TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("lemma TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("lemma TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("lemma TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("lemma TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("lemma TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("lemma TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("lemma TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("lemma TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("lemma TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("lemma TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("lemma TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("lemma TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("lemma TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("lemma TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("lemma TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("lemma TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("lemma TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("lemma TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("lemma TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("lemma TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("lemma TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("lemma TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("proposition TestId() {true};", "TestId()")>]
    [<DataRow("proposition TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("proposition TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("proposition TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("proposition TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("proposition TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("proposition TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("proposition TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("proposition TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("proposition TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("proposition TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("proposition TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("proposition TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("proposition TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("proposition TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("proposition TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("proposition TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("proposition TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("proposition TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("proposition TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("proposition TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("proposition TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("proposition TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("proposition TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("proposition TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("proposition TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("proposition TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("proposition TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("proposition TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("proposition TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("proposition TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("proposition TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("proposition TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("proposition TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("proposition TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("proposition TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("proposition TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("proposition TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("proposition TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("proposition TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("proposition TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("proposition TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("proposition TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("proposition TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("proposition TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("proposition TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("proposition TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("proposition TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("proposition TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("proposition TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("proposition TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("proposition TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("proposition TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("proposition TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("proposition TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("proposition TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("proposition TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("proposition TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("conjecture TestId() {true};", "TestId()")>]
    [<DataRow("conjecture TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("conjecture TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("conjecture TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("conjecture TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("conjecture TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("conjecture TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("conjecture TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("conjecture TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("conjecture TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("conjecture TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("conjecture TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("conjecture TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("conjecture TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("conjecture TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("conjecture TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("conjecture TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("conjecture TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("conjecture TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("conjecture TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("conjecture TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("conjecture TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("conjecture TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("conjecture TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("conjecture TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("conjecture TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("conjecture TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("conjecture TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("conjecture TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("conjecture TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("conjecture TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("conjecture TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("conjecture TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("conjecture TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("conjecture TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("conjecture TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("conjecture TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("conjecture TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("conjecture TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("conjecture TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("conjecture TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("conjecture TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("conjecture TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("conjecture TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("conjecture TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("conjecture TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("conjecture TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("conjecture TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("conjecture TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("conjecture TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("conjecture TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("conjecture TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("conjecture TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("conjecture TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("conjecture TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("conjecture TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("conjecture TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("conjecture TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("corollary TestId$1() {true};", "TestId$1()")>]
    [<DataRow("corollary TestId$1$2() {true};", "TestId$1$2()")>]
    [<DataRow("corollary TestId$1$2$3() {true};", "TestId$1$2$3()")>]
    [<DataRow("corollary TestId$1(x:ind) {true};", "TestId$1(ind)")>]
    [<DataRow("corollary TestId$1(x:pred) {true};", "TestId$1(pred)")>]
    [<DataRow("corollary TestId$1(x:func) {true};", "TestId$1(func)")>]
    [<DataRow("corollary TestId$1(x:obj) {true};", "TestId$1(obj)")>]
    [<DataRow("corollary TestId$1(x:index) {true};", "TestId$1(ind)")>]
    [<DataRow("corollary TestId$1(x:predicate) {true};", "TestId$1(pred)")>]
    [<DataRow("corollary TestId$1(x:function) {true};", "TestId$1(func)")>]
    [<DataRow("corollary TestId$1(x:object) {true};", "TestId$1(obj)")>]
    [<DataRow("corollary TestId$1(x:Nat) {true};", "TestId$1(Nat)")>]
    [<DataRow("corollary TestId$1(x:@Nat) {true};", "TestId$1(@Nat)")>]
    [<DataRow("corollary TestId$1(x:tpl) {true};", "TestId$1(tpl)")>]
    [<DataRow("corollary TestId$1(x:template) {true};", "TestId$1(template)")>]
    [<DataRow("corollary TestId$1(x:tplTest) {true};", "TestId$1(tplTest)")>]
    [<DataRow("corollary TestId$1(x:templateTest) {true};", "TestId$1(templateTest)")>]
    [<DataRow("corollary TestId$1(x,y,z:obj) {true};", "TestId$1(obj, obj, obj)")>]
    [<DataRow("corollary TestId$1(x,y:pred(z:obj)) {true};", "TestId$1(pred(obj), pred(obj))")>]
    [<DataRow("corollary TestId$1(x,y:pred(u,v,w:obj)) {true};", "TestId$1(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("corollary TestId$1(x:func(u:obj)->Nat) {true};", "TestId$1(func(obj) -> Nat)")>]
    [<DataRow("corollary TestId$1(x:obj(y:@Nat)) {true};", "TestId$1(obj(@Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:Nat)) {true};", "TestId$1(obj(Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:Test.Nat)) {true};", "TestId$1(obj(Test.Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:index)) {true};", "TestId$1(obj(ind))")>]
    [<DataRow("corollary TestId$1(x:obj(y:ind)) {true};", "TestId$1(obj(ind))")>]
    [<DataRow("corollary TestId$1(x:obj(y:tpl)) {true};", "TestId$1(obj(tpl))")>]
    [<DataRow("corollary TestId$1(x:obj(y:template)) {true};", "TestId$1(obj(template))")>]
    [<DataRow("corollary TestId$1(x:obj(y:tplTest)) {true};", "TestId$1(obj(tplTest))")>]
    [<DataRow("corollary TestId$1(x:obj(y:templateTest)) {true};", "TestId$1(obj(templateTest))")>]
    [<DataRow("corollary TestId$1(x:obj(y:Nat,z:templateTest)) {true};", "TestId$1(obj(Nat, templateTest))")>]
    [<DataRow("corollary TestId$1(x:obj(y:index,z:Nat)) {true};", "TestId$1(obj(ind, Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:obj,z:@Nat)) {true};", "TestId$1(obj(obj, @Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:tpl,z:index)) {true};", "TestId$1(obj(tpl, ind))")>]

    [<DataRow("corollary TestId$1(x:*ind) {true};", "TestId$1(*ind)")>]
    [<DataRow("corollary TestId$1(x:+pred) {true};", "TestId$1(+pred)")>]
    [<DataRow("corollary TestId$1(x:*func) {true};", "TestId$1(*func)")>]
    [<DataRow("corollary TestId$1(x:+obj) {true};", "TestId$1(+obj)")>]
    [<DataRow("corollary TestId$1(x:+index) {true};", "TestId$1(+ind)")>]
    [<DataRow("corollary TestId$1(x:*predicate) {true};", "TestId$1(*pred)")>]
    [<DataRow("corollary TestId$1(x:+function) {true};", "TestId$1(+func)")>]
    [<DataRow("corollary TestId$1(x:*object) {true};", "TestId$1(*obj)")>]
    [<DataRow("corollary TestId$1(x:+Nat) {true};", "TestId$1(+Nat)")>]
    [<DataRow("corollary TestId$1(x:*@Nat) {true};", "TestId$1(*@Nat)")>]
    [<DataRow("corollary TestId$1(x:*tpl) {true};", "TestId$1(*tpl)")>]
    [<DataRow("corollary TestId$1(x:+template) {true};", "TestId$1(+template)")>]
    [<DataRow("corollary TestId$1(x:*tplTest) {true};", "TestId$1(*tplTest)")>]
    [<DataRow("corollary TestId$1(x:+templateTest) {true};", "TestId$1(+templateTest)")>]
    [<DataRow("corollary TestId$1(x,y,z:+obj) {true};", "TestId$1(+obj, +obj, +obj)")>]
    [<DataRow("corollary TestId$1(x,y:+pred(z:obj)) {true};", "TestId$1(+pred(obj), +pred(obj))")>]
    [<DataRow("corollary TestId$1(x,y:pred(u,v,w:*obj)) {true};", "TestId$1(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("corollary TestId$1(x:func(u:+obj)->Nat) {true};", "TestId$1(func(+obj) -> Nat)")>]
    [<DataRow("corollary TestId$1(x:obj(y:*@Nat)) {true};", "TestId$1(obj(*@Nat))")>]
    [<DataRow("corollary TestId$1(x:obj(y:+Nat)) {true};", "TestId$1(obj(+Nat))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:+Test.Nat)) {true};", "TestId$1(+obj(+Test.Nat))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:*index)) {true};", "TestId$1(+obj(*ind))")>]
    [<DataRow("corollary TestId$1(x:*obj(y:+ind)) {true};", "TestId$1(*obj(+ind))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:*tpl)) {true};", "TestId$1(+obj(*tpl))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:*template)) {true};", "TestId$1(+obj(*template))")>]
    [<DataRow("corollary TestId$1(x:*obj(y:+tplTest)) {true};", "TestId$1(*obj(+tplTest))")>]
    [<DataRow("corollary TestId$1(x:*obj(y:*templateTest)) {true};", "TestId$1(*obj(*templateTest))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId$1(+obj(Nat, +templateTest))")>]
    [<DataRow("corollary TestId$1(x:+obj(y:index,z:*Nat)) {true};", "TestId$1(+obj(ind, *Nat))")>]
    [<DataRow("corollary TestId$1(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId$1(*obj(*obj, +@Nat))")>]
    [<DataRow("corollary TestId$1(x:*obj(y:+tpl,z:index)) {true};", "TestId$1(*obj(+tpl, ind))")>]

    [<DataRow("proof TestId$1 {1. |- trivial} ;", "TestId$1", "TestId$1")>]
    [<DataRow("proof TestId$1$2 {1. |- trivial} ;", "TestId$1$2", "TestId$1$2")>]
    [<DataRow("proof TestId$1$2$3 {1. |- trivial} ;", "TestId$1$2$3", "TestId$1$2$3")>]

    
    [<DataRow("def class Test:obj {intr} proof Test$1 {1. |- trivial};", "Test")>]
    [<DataRow("def class TestId:obj {intrinsic} ;", "TestId")>]
    [<DataRow("def class TestId:Nat1, Nat2, Nat3, Nat4 {intrinsic} ;", "TestId")>]
    [<DataRow("def class TestId:obj, Nat3 {intrinsic} ;", "TestId")>]

    [<DataRow("def pred TestId() {true};", "TestId()")>]
    [<DataRow("def pred TestId(x:ind) {true};", "TestId(ind)")>]
    [<DataRow("def pred TestId(x:pred) {true};", "TestId(pred)")>]
    [<DataRow("def pred TestId(x:func) {true};", "TestId(func)")>]
    [<DataRow("def pred TestId(x:obj) {true};", "TestId(obj)")>]
    [<DataRow("def pred TestId(x:index) {true};", "TestId(ind)")>]
    [<DataRow("def pred TestId(x:predicate) {true};", "TestId(pred)")>]
    [<DataRow("def pred TestId(x:function) {true};", "TestId(func)")>]
    [<DataRow("def pred TestId(x:object) {true};", "TestId(obj)")>]
    [<DataRow("def pred TestId(x:Nat) {true};", "TestId(Nat)")>]
    [<DataRow("def pred TestId(x:@Nat) {true};", "TestId(@Nat)")>]
    [<DataRow("def pred TestId(x:tpl) {true};", "TestId(tpl)")>]
    [<DataRow("def pred TestId(x:template) {true};", "TestId(template)")>]
    [<DataRow("def pred TestId(x:tplTest) {true};", "TestId(tplTest)")>]
    [<DataRow("def pred TestId(x:templateTest) {true};", "TestId(templateTest)")>]
    [<DataRow("def pred TestId(x,y,z:obj) {true};", "TestId(obj, obj, obj)")>]
    [<DataRow("def pred TestId(x,y:pred(z:obj)) {true};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("def pred TestId(x,y:pred(u,v,w:obj)) {true};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("def pred TestId(x:func(u:obj)->Nat) {true};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("def pred TestId(x:obj(y:@Nat)) {true};", "TestId(obj(@Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:Nat)) {true};", "TestId(obj(Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:Test.Nat)) {true};", "TestId(obj(Test.Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:index)) {true};", "TestId(obj(ind))")>]
    [<DataRow("def pred TestId(x:obj(y:ind)) {true};", "TestId(obj(ind))")>]
    [<DataRow("def pred TestId(x:obj(y:tpl)) {true};", "TestId(obj(tpl))")>]
    [<DataRow("def pred TestId(x:obj(y:template)) {true};", "TestId(obj(template))")>]
    [<DataRow("def pred TestId(x:obj(y:tplTest)) {true};", "TestId(obj(tplTest))")>]
    [<DataRow("def pred TestId(x:obj(y:templateTest)) {true};", "TestId(obj(templateTest))")>]
    [<DataRow("def pred TestId(x:obj(y:Nat,z:templateTest)) {true};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("def pred TestId(x:obj(y:index,z:Nat)) {true};", "TestId(obj(ind, Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:obj,z:@Nat)) {true};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:tpl,z:index)) {true};", "TestId(obj(tpl, ind))")>]

    [<DataRow("def pred TestId(x:*ind) {true};", "TestId(*ind)")>]
    [<DataRow("def pred TestId(x:+pred) {true};", "TestId(+pred)")>]
    [<DataRow("def pred TestId(x:*func) {true};", "TestId(*func)")>]
    [<DataRow("def pred TestId(x:+obj) {true};", "TestId(+obj)")>]
    [<DataRow("def pred TestId(x:+index) {true};", "TestId(+ind)")>]
    [<DataRow("def pred TestId(x:*predicate) {true};", "TestId(*pred)")>]
    [<DataRow("def pred TestId(x:+function) {true};", "TestId(+func)")>]
    [<DataRow("def pred TestId(x:*object) {true};", "TestId(*obj)")>]
    [<DataRow("def pred TestId(x:+Nat) {true};", "TestId(+Nat)")>]
    [<DataRow("def pred TestId(x:*@Nat) {true};", "TestId(*@Nat)")>]
    [<DataRow("def pred TestId(x:*tpl) {true};", "TestId(*tpl)")>]
    [<DataRow("def pred TestId(x:+template) {true};", "TestId(+template)")>]
    [<DataRow("def pred TestId(x:*tplTest) {true};", "TestId(*tplTest)")>]
    [<DataRow("def pred TestId(x:+templateTest) {true};", "TestId(+templateTest)")>]
    [<DataRow("def pred TestId(x,y,z:+obj) {true};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("def pred TestId(x,y:+pred(z:obj)) {true};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("def pred TestId(x,y:pred(u,v,w:*obj)) {true};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("def pred TestId(x:func(u:+obj)->Nat) {true};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("def pred TestId(x:obj(y:*@Nat)) {true};", "TestId(obj(*@Nat))")>]
    [<DataRow("def pred TestId(x:obj(y:+Nat)) {true};", "TestId(obj(+Nat))")>]
    [<DataRow("def pred TestId(x:+obj(y:+Test.Nat)) {true};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("def pred TestId(x:+obj(y:*index)) {true};", "TestId(+obj(*ind))")>]
    [<DataRow("def pred TestId(x:*obj(y:+ind)) {true};", "TestId(*obj(+ind))")>]
    [<DataRow("def pred TestId(x:+obj(y:*tpl)) {true};", "TestId(+obj(*tpl))")>]
    [<DataRow("def pred TestId(x:+obj(y:*template)) {true};", "TestId(+obj(*template))")>]
    [<DataRow("def pred TestId(x:*obj(y:+tplTest)) {true};", "TestId(*obj(+tplTest))")>]
    [<DataRow("def pred TestId(x:*obj(y:*templateTest)) {true};", "TestId(*obj(*templateTest))")>]
    [<DataRow("def pred TestId(x:+obj(y:Nat,z:+templateTest)) {true};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("def pred TestId(x:+obj(y:index,z:*Nat)) {true};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("def pred TestId(x:*obj(y:*obj,z:+@Nat)) {true};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("def pred TestId(x:*obj(y:+tpl,z:index)) {true};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("def func TestId() -> obj {intrinsic};", "TestId() -> obj")>]
    [<DataRow("def func TestId(x:ind) -> obj {intrinsic};", "TestId(ind) -> obj")>]
    [<DataRow("def func TestId(x:pred) -> obj {intrinsic};", "TestId(pred) -> obj")>]
    [<DataRow("def func TestId(x:func) -> obj {intrinsic};", "TestId(func) -> obj")>]
    [<DataRow("def func TestId(x:obj) -> obj {intrinsic};", "TestId(obj) -> obj")>]
    [<DataRow("def func TestId(x:index) -> obj {intrinsic};", "TestId(ind) -> obj")>]
    [<DataRow("def func TestId(x:predicate) -> obj {intrinsic};", "TestId(pred) -> obj")>]
    [<DataRow("def func TestId(x:function) -> obj {intrinsic};", "TestId(func) -> obj")>]
    [<DataRow("def func TestId(x:object) -> obj {intrinsic};", "TestId(obj) -> obj")>]
    [<DataRow("def func TestId(x:Nat) -> obj {intrinsic};", "TestId(Nat) -> obj")>]
    [<DataRow("def func TestId(x:@Nat) -> obj {intrinsic};", "TestId(@Nat) -> obj")>]
    [<DataRow("def func TestId(x:tpl) -> obj {intrinsic};", "TestId(tpl) -> obj")>]
    [<DataRow("def func TestId(x:template) -> obj {intrinsic};", "TestId(template) -> obj")>]
    [<DataRow("def func TestId(x:tplTest) -> obj {intrinsic};", "TestId(tplTest) -> obj")>]
    [<DataRow("def func TestId(x:templateTest) -> obj {intrinsic};", "TestId(templateTest) -> obj")>]
    [<DataRow("def func TestId(x,y,z:obj) -> obj {intrinsic};", "TestId(obj, obj, obj) -> obj")>]
    [<DataRow("def func TestId(x,y:pred(z:obj)) -> obj {intrinsic};", "TestId(pred(obj), pred(obj)) -> obj")>]
    [<DataRow("def func TestId(x,y:pred(u,v,w:obj)) -> obj {intrinsic};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj)) -> obj")>]
    [<DataRow("def func TestId(x:func(u:obj)->Nat) -> obj {intrinsic};", "TestId(func(obj) -> Nat) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:@Nat)) -> obj {intrinsic};", "TestId(obj(@Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:Nat)) -> obj {intrinsic};", "TestId(obj(Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:Test.Nat)) -> obj {intrinsic};", "TestId(obj(Test.Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:index)) -> obj {intrinsic};", "TestId(obj(ind)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:ind)) -> obj {intrinsic};", "TestId(obj(ind)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:tpl)) -> obj {intrinsic};", "TestId(obj(tpl)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:template)) -> obj {intrinsic};", "TestId(obj(template)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:tplTest)) -> obj {intrinsic};", "TestId(obj(tplTest)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:templateTest)) -> obj {intrinsic};", "TestId(obj(templateTest)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:Nat,z:templateTest)) -> obj {intrinsic};", "TestId(obj(Nat, templateTest)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:index,z:Nat)) -> obj {intrinsic};", "TestId(obj(ind, Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:obj,z:@Nat)) -> obj {intrinsic};", "TestId(obj(obj, @Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:tpl,z:index)) -> obj {intrinsic};", "TestId(obj(tpl, ind)) -> obj")>]

    [<DataRow("def func TestId(x:*ind) -> obj {intrinsic};", "TestId(*ind) -> obj")>]
    [<DataRow("def func TestId(x:+pred) -> obj {intrinsic};", "TestId(+pred) -> obj")>]
    [<DataRow("def func TestId(x:*func) -> obj {intrinsic};", "TestId(*func) -> obj")>]
    [<DataRow("def func TestId(x:+obj) -> obj {intrinsic};", "TestId(+obj) -> obj")>]
    [<DataRow("def func TestId(x:+index) -> obj {intrinsic};", "TestId(+ind) -> obj")>]
    [<DataRow("def func TestId(x:*predicate) -> obj {intrinsic};", "TestId(*pred) -> obj")>]
    [<DataRow("def func TestId(x:+function) -> obj {intrinsic};", "TestId(+func) -> obj")>]
    [<DataRow("def func TestId(x:*object) -> obj {intrinsic};", "TestId(*obj) -> obj")>]
    [<DataRow("def func TestId(x:+Nat) -> obj {intrinsic};", "TestId(+Nat) -> obj")>]
    [<DataRow("def func TestId(x:*@Nat) -> obj {intrinsic};", "TestId(*@Nat) -> obj")>]
    [<DataRow("def func TestId(x:*tpl) -> obj {intrinsic};", "TestId(*tpl) -> obj")>]
    [<DataRow("def func TestId(x:+template) -> obj {intrinsic};", "TestId(+template) -> obj")>]
    [<DataRow("def func TestId(x:*tplTest) -> obj {intrinsic};", "TestId(*tplTest) -> obj")>]
    [<DataRow("def func TestId(x:+templateTest) -> obj {intrinsic};", "TestId(+templateTest) -> obj")>]
    [<DataRow("def func TestId(x,y,z:+obj) -> obj {intrinsic};", "TestId(+obj, +obj, +obj) -> obj")>]
    [<DataRow("def func TestId(x,y:+pred(z:obj)) -> obj {intrinsic};", "TestId(+pred(obj), +pred(obj)) -> obj")>]
    [<DataRow("def func TestId(x,y:pred(u,v,w:*obj)) -> obj {intrinsic};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj)) -> obj")>]
    [<DataRow("def func TestId(x:func(u:+obj)->Nat) -> obj {intrinsic};", "TestId(func(+obj) -> Nat) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:*@Nat)) -> obj {intrinsic};", "TestId(obj(*@Nat)) -> obj")>]
    [<DataRow("def func TestId(x:obj(y:+Nat)) -> obj {intrinsic};", "TestId(obj(+Nat)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:+Test.Nat)) -> obj {intrinsic};", "TestId(+obj(+Test.Nat)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:*index)) -> obj {intrinsic};", "TestId(+obj(*ind)) -> obj")>]
    [<DataRow("def func TestId(x:*obj(y:+ind)) -> obj {intrinsic};", "TestId(*obj(+ind)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:*tpl)) -> obj {intrinsic};", "TestId(+obj(*tpl)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:*template)) -> obj {intrinsic};", "TestId(+obj(*template)) -> obj")>]
    [<DataRow("def func TestId(x:*obj(y:+tplTest)) -> obj {intrinsic};", "TestId(*obj(+tplTest)) -> obj")>]
    [<DataRow("def func TestId(x:*obj(y:*templateTest)) -> obj {intrinsic};", "TestId(*obj(*templateTest)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:Nat,z:+templateTest)) -> obj {intrinsic};", "TestId(+obj(Nat, +templateTest)) -> obj")>]
    [<DataRow("def func TestId(x:+obj(y:index,z:*Nat)) -> obj {intrinsic};", "TestId(+obj(ind, *Nat)) -> obj")>]
    [<DataRow("def func TestId(x:*obj(y:*obj,z:+@Nat)) -> obj {intrinsic};", "TestId(*obj(*obj, +@Nat)) -> obj")>]
    [<DataRow("def func TestId(x:*obj(y:+tpl,z:index)) -> obj {intrinsic};", "TestId(*obj(+tpl, ind)) -> obj")>]

    [<DataRow("def func TestId() -> ind {intrinsic};", "TestId() -> ind")>]
    [<DataRow("def func TestId() -> pred {intrinsic};", "TestId() -> pred")>]
    [<DataRow("def func TestId() -> func {intrinsic};", "TestId() -> func")>]
    [<DataRow("def func TestId() -> obj {intrinsic};", "TestId() -> obj")>]
    [<DataRow("def func TestId() -> index {intrinsic};", "TestId() -> ind")>]
    [<DataRow("def func TestId() -> predicate {intrinsic};", "TestId() -> pred")>]
    [<DataRow("def func TestId() -> function {intrinsic};", "TestId() -> func")>]
    [<DataRow("def func TestId() -> object {intrinsic};", "TestId() -> obj")>]
    [<DataRow("def func TestId() -> Nat {intrinsic};", "TestId() -> Nat")>]
    [<DataRow("def func TestId() -> @Nat {intrinsic};", "TestId() -> @Nat")>]
    [<DataRow("def func TestId() -> tpl {intrinsic};", "TestId() -> tpl")>]
    [<DataRow("def func TestId() -> template {intrinsic};", "TestId() -> template")>]
    [<DataRow("def func TestId() -> tplTest {intrinsic};", "TestId() -> tplTest")>]
    [<DataRow("def func TestId() -> templateTest {intrinsic};", "TestId() -> templateTest")>]
    [<DataRow("def func TestId() -> Nat(x,y,z:obj) {intrinsic};", "TestId() -> Nat(obj, obj, obj)")>]
    [<DataRow("def func TestId() -> template(x,y:pred(z:obj)) {intrinsic};", "TestId() -> template(pred(obj), pred(obj))")>]
    [<DataRow("def func TestId() -> obj(x,y:pred(u,v,w:obj)) {intrinsic};", "TestId() -> obj(pred(obj, obj, obj), pred(obj, obj, obj))")>]

    [<DataRow("def func TestId() -> pred(x:func(u:obj)->Nat) {intrinsic};", "TestId() -> pred(func(obj) -> Nat)")>]
    [<DataRow("def func TestId() -> func(x:obj(y:@Nat))->obj {intrinsic};", "TestId() -> func(obj(@Nat)) -> obj")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:Test.Nat)) {intrinsic};", "TestId() -> obj(obj(Test.Nat))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:index)) {intrinsic};", "TestId() -> obj(obj(ind))")>]
    [<DataRow("def func TestId() -> templateTest(x:obj(y:ind)) {intrinsic};", "TestId() -> templateTest(obj(ind))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:tpl)) {intrinsic};", "TestId() -> obj(obj(tpl))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:template)) {intrinsic};", "TestId() -> obj(obj(template))")>]
    [<DataRow("def func TestId() -> templateTest(x:obj(y:tplTest)) {intrinsic};", "TestId() -> templateTest(obj(tplTest))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:templateTest)) {intrinsic};", "TestId() -> obj(obj(templateTest))")>]

    [<DataRow("def func TestId() -> obj(x:obj(y:Nat,z:templateTest)) {intrinsic};", "TestId() -> obj(obj(Nat, templateTest))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:index,z:Nat)) {intrinsic};", "TestId() -> obj(obj(ind, Nat))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:obj,z:@Nat)) {intrinsic};", "TestId() -> obj(obj(obj, @Nat))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:tpl,z:index)) {intrinsic};", "TestId() -> obj(obj(tpl, ind))")>]
    [<DataRow("def func TestId() -> obj(x:*ind) {intrinsic};", "TestId() -> obj(*ind)")>]
    [<DataRow("def func TestId() -> obj(x:+pred) {intrinsic};", "TestId() -> obj(+pred)")>]
    [<DataRow("def func TestId() -> obj(x:*func) {intrinsic};", "TestId() -> obj(*func)")>]
    [<DataRow("def func TestId() -> obj(x:+obj) {intrinsic};", "TestId() -> obj(+obj)")>]

    [<DataRow("def func TestId() -> obj(x:+index) {intrinsic};", "TestId() -> obj(+ind)")>]
    [<DataRow("def func TestId() -> obj(x:*predicate) {intrinsic};", "TestId() -> obj(*pred)")>]
    [<DataRow("def func TestId() -> obj(x:+function) {intrinsic};", "TestId() -> obj(+func)")>]
    [<DataRow("def func TestId() -> obj(x:*object) {intrinsic};", "TestId() -> obj(*obj)")>]
    [<DataRow("def func TestId() -> obj(x:+Nat) {intrinsic};", "TestId() -> obj(+Nat)")>]
    [<DataRow("def func TestId() -> obj(x:*@Nat) {intrinsic};", "TestId() -> obj(*@Nat)")>]
    [<DataRow("def func TestId() -> obj(x:*tpl) {intrinsic};", "TestId() -> obj(*tpl)")>]
    [<DataRow("def func TestId() -> obj(x:+template) {intrinsic};", "TestId() -> obj(+template)")>]
    [<DataRow("def func TestId() -> obj(x:*tplTest) {intrinsic};", "TestId() -> obj(*tplTest)")>]
    [<DataRow("def func TestId() -> obj(x:+templateTest) {intrinsic};", "TestId() -> obj(+templateTest)")>]
    [<DataRow("def func TestId() -> obj(x,y,z:+obj) {intrinsic};", "TestId() -> obj(+obj, +obj, +obj)")>]
    [<DataRow("def func TestId() -> obj(x,y:+pred(z:obj)) {intrinsic};", "TestId() -> obj(+pred(obj), +pred(obj))")>]
    [<DataRow("def func TestId() -> obj(x,y:pred(u,v,w:*obj)) {intrinsic};", "TestId() -> obj(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("def func TestId() -> obj(x:func(u:+obj)->Nat) {intrinsic};", "TestId() -> obj(func(+obj) -> Nat)")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:*@Nat)) {intrinsic};", "TestId() -> obj(obj(*@Nat))")>]
    [<DataRow("def func TestId() -> obj(x:obj(y:+Nat)) {intrinsic};", "TestId() -> obj(obj(+Nat))")>]
    [<DataRow("def func TestId() -> obj(x:+obj(y:+Test.Nat)) {intrinsic};", "TestId() -> obj(+obj(+Test.Nat))")>]
    [<DataRow("def func TestId() -> obj(x:+obj(y:*index)) {intrinsic};", "TestId() -> obj(+obj(*ind))")>]
    [<DataRow("def func TestId() -> obj(x:*obj(y:+ind)) {intrinsic};", "TestId() -> obj(*obj(+ind))")>]
    [<DataRow("def func TestId() -> obj(x:+obj(y:*tpl)) {intrinsic};", "TestId() -> obj(+obj(*tpl))")>]
    [<DataRow("def func TestId() -> template(x:+obj(y:*template)) {intrinsic};", "TestId() -> template(+obj(*template))")>]
    [<DataRow("def func TestId() -> obj(x:*obj(y:+tplTest)) {intrinsic};", "TestId() -> obj(*obj(+tplTest))")>]
    [<DataRow("def func TestId() -> obj(x:*obj(y:*templateTest)) {intrinsic};", "TestId() -> obj(*obj(*templateTest))")>]
    [<DataRow("def func TestId() -> obj(x:+obj(y:Nat,z:+templateTest)) {intrinsic};", "TestId() -> obj(+obj(Nat, +templateTest))")>]
    [<DataRow("def func TestId() -> obj(x:+obj(y:index,z:*Nat)) {intrinsic};", "TestId() -> obj(+obj(ind, *Nat))")>]
    [<DataRow("def func TestId() -> obj(x:*obj(y:*obj,z:+@Nat)) {intrinsic};", "TestId() -> obj(*obj(*obj, +@Nat))")>]
    [<DataRow("def func TestId() -> obj(x:*obj(y:+tpl,z:index)) {intrinsic};", "TestId() -> obj(*obj(+tpl, ind))")>]

    [<TestMethod>]
    member this.TestTypeSignatureOfFplBlocks(fplCode:string, expectedName:string) =
        let filename = "TestTypeSignatureOfFplBlocks"
        let result = prepareFplCode(filename + ".fpl", fplCode, false) 
        let block = result.Value.Root.Scope[filename]
        let fplValue = block.Scope[expectedName]
        let actualTypeSignature = fplValue.Type(true)
        let actualSignatureStart = fplValue.NameStartPos.Index
        let actualSignatureEnd = fplValue.NameEndPos.Index
        Assert.AreEqual<string>(expectedName, actualTypeSignature)
        let expectedStart =
            if fplCode.StartsWith("def ") then 
                (int64)4
            else
                (int64)0
        Assert.AreEqual<int64>(expectedStart, actualSignatureStart)
        let expectedEnd =
            if fplCode.StartsWith("def class") then 
                (int64)(fplCode.IndexOf(":", System.StringComparison.OrdinalIgnoreCase))
            else
                (int64)(fplCode.IndexOf(" {", System.StringComparison.OrdinalIgnoreCase))
        Assert.AreEqual<int64>(expectedEnd, actualSignatureEnd)
        prepareFplCode(filename, "", true) |> ignore

    [<DataRow("def cl T:obj {intr prty pred TestId() {intrinsic}};", "TestId()")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:ind) {intrinsic}};", "TestId(ind)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:pred) {intrinsic}};", "TestId(pred)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:func) {intrinsic}};", "TestId(func)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj) {intrinsic}};", "TestId(obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:index) {intrinsic}};", "TestId(ind)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:predicate) {intrinsic}};", "TestId(pred)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:function) {intrinsic}};", "TestId(func)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:object) {intrinsic}};", "TestId(obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:Nat) {intrinsic}};", "TestId(Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:@Nat) {intrinsic}};", "TestId(@Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:tpl) {intrinsic}};", "TestId(tpl)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:template) {intrinsic}};", "TestId(template)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:tplTest) {intrinsic}};", "TestId(tplTest)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:templateTest) {intrinsic}};", "TestId(templateTest)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y,z:obj) {intrinsic}};", "TestId(obj, obj, obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y:pred(z:obj)) {intrinsic}};", "TestId(pred(obj), pred(obj))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y:pred(u,v,w:obj)) {intrinsic}};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:func(u:obj)->Nat) {intrinsic}};", "TestId(func(obj) -> Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:@Nat)) {intrinsic}};", "TestId(obj(@Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:Nat)) {intrinsic}};", "TestId(obj(Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:Test.Nat)) {intrinsic}};", "TestId(obj(Test.Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:index)) {intrinsic}};", "TestId(obj(ind))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:ind)) {intrinsic}};", "TestId(obj(ind))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:tpl)) {intrinsic}};", "TestId(obj(tpl))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:template)) {intrinsic}};", "TestId(obj(template))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:tplTest)) {intrinsic}};", "TestId(obj(tplTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:templateTest)) {intrinsic}};", "TestId(obj(templateTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:Nat,z:templateTest)) {intrinsic}};", "TestId(obj(Nat, templateTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:index,z:Nat)) {intrinsic}};", "TestId(obj(ind, Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:obj,z:@Nat)) {intrinsic}};", "TestId(obj(obj, @Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:tpl,z:index)) {intrinsic}};", "TestId(obj(tpl, ind))")>]

    [<DataRow("def cl T:obj {intr prty pred TestId(x:*ind) {intrinsic}};", "TestId(*ind)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+pred) {intrinsic}};", "TestId(+pred)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*func) {intrinsic}};", "TestId(*func)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj) {intrinsic}};", "TestId(+obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+index) {intrinsic}};", "TestId(+ind)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*predicate) {intrinsic}};", "TestId(*pred)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+function) {intrinsic}};", "TestId(+func)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*object) {intrinsic}};", "TestId(*obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+Nat) {intrinsic}};", "TestId(+Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*@Nat) {intrinsic}};", "TestId(*@Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*tpl) {intrinsic}};", "TestId(*tpl)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+template) {intrinsic}};", "TestId(+template)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*tplTest) {intrinsic}};", "TestId(*tplTest)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+templateTest) {intrinsic}};", "TestId(+templateTest)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y,z:+obj) {intrinsic}};", "TestId(+obj, +obj, +obj)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y:+pred(z:obj)) {intrinsic}};", "TestId(+pred(obj), +pred(obj))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x,y:pred(u,v,w:*obj)) {intrinsic}};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:func(u:+obj)->Nat) {intrinsic}};", "TestId(func(+obj) -> Nat)")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:*@Nat)) {intrinsic}};", "TestId(obj(*@Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:obj(y:+Nat)) {intrinsic}};", "TestId(obj(+Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:+Test.Nat)) {intrinsic}};", "TestId(+obj(+Test.Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:*index)) {intrinsic}};", "TestId(+obj(*ind))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*obj(y:+ind)) {intrinsic}};", "TestId(*obj(+ind))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:*tpl)) {intrinsic}};", "TestId(+obj(*tpl))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:*template)) {intrinsic}};", "TestId(+obj(*template))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*obj(y:+tplTest)) {intrinsic}};", "TestId(*obj(+tplTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*obj(y:*templateTest)) {intrinsic}};", "TestId(*obj(*templateTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:Nat,z:+templateTest)) {intrinsic}};", "TestId(+obj(Nat, +templateTest))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:+obj(y:index,z:*Nat)) {intrinsic}};", "TestId(+obj(ind, *Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*obj(y:*obj,z:+@Nat)) {intrinsic}};", "TestId(*obj(*obj, +@Nat))")>]
    [<DataRow("def cl T:obj {intr prty pred TestId(x:*obj(y:+tpl,z:index)) {intrinsic}};", "TestId(*obj(+tpl, ind))")>]

    [<DataRow("def cl T:obj {intr prty func TestId() -> obj {intrinsic}};", "TestId() -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:ind) -> obj {intrinsic}};", "TestId(ind) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:pred) -> obj {intrinsic}};", "TestId(pred) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:func) -> obj {intrinsic}};", "TestId(func) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj) -> obj {intrinsic}};", "TestId(obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:index) -> obj {intrinsic}};", "TestId(ind) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:predicate) -> obj {intrinsic}};", "TestId(pred) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:function) -> obj {intrinsic}};", "TestId(func) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:object) -> obj {intrinsic}};", "TestId(obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:Nat) -> obj {intrinsic}};", "TestId(Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:@Nat) -> obj {intrinsic}};", "TestId(@Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:tpl) -> obj {intrinsic}};", "TestId(tpl) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:template) -> obj {intrinsic}};", "TestId(template) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:tplTest) -> obj {intrinsic}};", "TestId(tplTest) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:templateTest) -> obj {intrinsic}};", "TestId(templateTest) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y,z:obj) -> obj {intrinsic}};", "TestId(obj, obj, obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y:pred(z:obj)) -> obj {intrinsic}};", "TestId(pred(obj), pred(obj)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y:pred(u,v,w:obj)) -> obj {intrinsic}};", "TestId(pred(obj, obj, obj), pred(obj, obj, obj)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:func(u:obj)->Nat) -> obj {intrinsic}};", "TestId(func(obj) -> Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:@Nat)) -> obj {intrinsic}};", "TestId(obj(@Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:Nat)) -> obj {intrinsic}};", "TestId(obj(Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:Test.Nat)) -> obj {intrinsic}};", "TestId(obj(Test.Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:index)) -> obj {intrinsic}};", "TestId(obj(ind)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:ind)) -> obj {intrinsic}};", "TestId(obj(ind)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:tpl)) -> obj {intrinsic}};", "TestId(obj(tpl)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:template)) -> obj {intrinsic}};", "TestId(obj(template)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:tplTest)) -> obj {intrinsic}};", "TestId(obj(tplTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:templateTest)) -> obj {intrinsic}};", "TestId(obj(templateTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:Nat,z:templateTest)) -> obj {intrinsic}};", "TestId(obj(Nat, templateTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:index,z:Nat)) -> obj {intrinsic}};", "TestId(obj(ind, Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:obj,z:@Nat)) -> obj {intrinsic}};", "TestId(obj(obj, @Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:tpl,z:index)) -> obj {intrinsic}};", "TestId(obj(tpl, ind)) -> obj")>]

    [<DataRow("def cl T:obj {intr prty func TestId(x:*ind) -> obj {intrinsic}};", "TestId(*ind) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+pred) -> obj {intrinsic}};", "TestId(+pred) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*func) -> obj {intrinsic}};", "TestId(*func) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj) -> obj {intrinsic}};", "TestId(+obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+index) -> obj {intrinsic}};", "TestId(+ind) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*predicate) -> obj {intrinsic}};", "TestId(*pred) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+function) -> obj {intrinsic}};", "TestId(+func) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*object) -> obj {intrinsic}};", "TestId(*obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+Nat) -> obj {intrinsic}};", "TestId(+Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*@Nat) -> obj {intrinsic}};", "TestId(*@Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*tpl) -> obj {intrinsic}};", "TestId(*tpl) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+template) -> obj {intrinsic}};", "TestId(+template) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*tplTest) -> obj {intrinsic}};", "TestId(*tplTest) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+templateTest) -> obj {intrinsic}};", "TestId(+templateTest) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y,z:+obj) -> obj {intrinsic}};", "TestId(+obj, +obj, +obj) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y:+pred(z:obj)) -> obj {intrinsic}};", "TestId(+pred(obj), +pred(obj)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x,y:pred(u,v,w:*obj)) -> obj {intrinsic}};", "TestId(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:func(u:+obj)->Nat) -> obj {intrinsic}};", "TestId(func(+obj) -> Nat) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:*@Nat)) -> obj {intrinsic}};", "TestId(obj(*@Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:obj(y:+Nat)) -> obj {intrinsic}};", "TestId(obj(+Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:+Test.Nat)) -> obj {intrinsic}};", "TestId(+obj(+Test.Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:*index)) -> obj {intrinsic}};", "TestId(+obj(*ind)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*obj(y:+ind)) -> obj {intrinsic}};", "TestId(*obj(+ind)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:*tpl)) -> obj {intrinsic}};", "TestId(+obj(*tpl)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:*template)) -> obj {intrinsic}};", "TestId(+obj(*template)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*obj(y:+tplTest)) -> obj {intrinsic}};", "TestId(*obj(+tplTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*obj(y:*templateTest)) -> obj {intrinsic}};", "TestId(*obj(*templateTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:Nat,z:+templateTest)) -> obj {intrinsic}};", "TestId(+obj(Nat, +templateTest)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:+obj(y:index,z:*Nat)) -> obj {intrinsic}};", "TestId(+obj(ind, *Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*obj(y:*obj,z:+@Nat)) -> obj {intrinsic}};", "TestId(*obj(*obj, +@Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId(x:*obj(y:+tpl,z:index)) -> obj {intrinsic}};", "TestId(*obj(+tpl, ind)) -> obj")>]

    [<DataRow("def cl T:obj {intr prty func TestId() -> ind {intrinsic}};", "TestId() -> ind")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> pred {intrinsic}};", "TestId() -> pred")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> func {intrinsic}};", "TestId() -> func")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj {intrinsic}};", "TestId() -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> index {intrinsic}};", "TestId() -> ind")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> predicate {intrinsic}};", "TestId() -> pred")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> function {intrinsic}};", "TestId() -> func")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> object {intrinsic}};", "TestId() -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> Nat {intrinsic}};", "TestId() -> Nat")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> @Nat {intrinsic}};", "TestId() -> @Nat")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> tpl {intrinsic}};", "TestId() -> tpl")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> template {intrinsic}};", "TestId() -> template")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> tplTest {intrinsic}};", "TestId() -> tplTest")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> templateTest {intrinsic}};", "TestId() -> templateTest")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> Nat(x,y,z:obj) {intrinsic}};", "TestId() -> Nat(obj, obj, obj)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> template(x,y:pred(z:obj)) {intrinsic}};", "TestId() -> template(pred(obj), pred(obj))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x,y:pred(u,v,w:obj)) {intrinsic}};", "TestId() -> obj(pred(obj, obj, obj), pred(obj, obj, obj))")>]

    [<DataRow("def cl T:obj {intr prty func TestId() -> pred(x:func(u:obj)->Nat) {intrinsic}};", "TestId() -> pred(func(obj) -> Nat)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> func(x:obj(y:@Nat))->obj {intrinsic}};", "TestId() -> func(obj(@Nat)) -> obj")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:Test.Nat)) {intrinsic}};", "TestId() -> obj(obj(Test.Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:index)) {intrinsic}};", "TestId() -> obj(obj(ind))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> templateTest(x:obj(y:ind)) {intrinsic}};", "TestId() -> templateTest(obj(ind))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:tpl)) {intrinsic}};", "TestId() -> obj(obj(tpl))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:template)) {intrinsic}};", "TestId() -> obj(obj(template))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> templateTest(x:obj(y:tplTest)) {intrinsic}};", "TestId() -> templateTest(obj(tplTest))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:templateTest)) {intrinsic}};", "TestId() -> obj(obj(templateTest))")>]

    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:Nat,z:templateTest)) {intrinsic}};", "TestId() -> obj(obj(Nat, templateTest))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:index,z:Nat)) {intrinsic}};", "TestId() -> obj(obj(ind, Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:obj,z:@Nat)) {intrinsic}};", "TestId() -> obj(obj(obj, @Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:tpl,z:index)) {intrinsic}};", "TestId() -> obj(obj(tpl, ind))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*ind) {intrinsic}};", "TestId() -> obj(*ind)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+pred) {intrinsic}};", "TestId() -> obj(+pred)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*func) {intrinsic}};", "TestId() -> obj(*func)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj) {intrinsic}};", "TestId() -> obj(+obj)")>]

    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+index) {intrinsic}};", "TestId() -> obj(+ind)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*predicate) {intrinsic}};", "TestId() -> obj(*pred)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+function) {intrinsic}};", "TestId() -> obj(+func)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*object) {intrinsic}};", "TestId() -> obj(*obj)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+Nat) {intrinsic}};", "TestId() -> obj(+Nat)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*@Nat) {intrinsic}};", "TestId() -> obj(*@Nat)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*tpl) {intrinsic}};", "TestId() -> obj(*tpl)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+template) {intrinsic}};", "TestId() -> obj(+template)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*tplTest) {intrinsic}};", "TestId() -> obj(*tplTest)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+templateTest) {intrinsic}};", "TestId() -> obj(+templateTest)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x,y,z:+obj) {intrinsic}};", "TestId() -> obj(+obj, +obj, +obj)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x,y:+pred(z:obj)) {intrinsic}};", "TestId() -> obj(+pred(obj), +pred(obj))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x,y:pred(u,v,w:*obj)) {intrinsic}};", "TestId() -> obj(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:func(u:+obj)->Nat) {intrinsic}};", "TestId() -> obj(func(+obj) -> Nat)")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:*@Nat)) {intrinsic}};", "TestId() -> obj(obj(*@Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:obj(y:+Nat)) {intrinsic}};", "TestId() -> obj(obj(+Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj(y:+Test.Nat)) {intrinsic}};", "TestId() -> obj(+obj(+Test.Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj(y:*index)) {intrinsic}};", "TestId() -> obj(+obj(*ind))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*obj(y:+ind)) {intrinsic}};", "TestId() -> obj(*obj(+ind))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj(y:*tpl)) {intrinsic}};", "TestId() -> obj(+obj(*tpl))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> template(x:+obj(y:*template)) {intrinsic}};", "TestId() -> template(+obj(*template))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*obj(y:+tplTest)) {intrinsic}};", "TestId() -> obj(*obj(+tplTest))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*obj(y:*templateTest)) {intrinsic}};", "TestId() -> obj(*obj(*templateTest))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj(y:Nat,z:+templateTest)) {intrinsic}};", "TestId() -> obj(+obj(Nat, +templateTest))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:+obj(y:index,z:*Nat)) {intrinsic}};", "TestId() -> obj(+obj(ind, *Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*obj(y:*obj,z:+@Nat)) {intrinsic}};", "TestId() -> obj(*obj(*obj, +@Nat))")>]
    [<DataRow("def cl T:obj {intr prty func TestId() -> obj(x:*obj(y:+tpl,z:index)) {intrinsic}};", "TestId() -> obj(*obj(+tpl, ind))")>]

    [<TestMethod>]
    member this.TestTypeSignatureOfFplProperties(fplCode:string, expectedName:string, expectedTypeSignatureStr:string) =
        let expectedTypeSignature = expectedTypeSignatureStr.Split(' ') |> List.ofArray
        let filename = "TestTypeSignatureOfFplProperties"
        let result = prepareFplCode(filename + ".fpl", fplCode, false) 
        let fplValue = result.Value.Root.Scope[filename].Scope["T"].Scope[expectedName]
        let actualTypeSignature = fplValue.Type(true)
        let actualSignatureStart = fplValue.NameStartPos.Index
        let actualSignatureEnd = fplValue.NameEndPos.Index
        Assert.AreEqual<string>(expectedName, actualTypeSignature)
        let expectedStart =
                (int64)19
        Assert.AreEqual<int64>(expectedStart, actualSignatureStart)
        let expectedEnd =
                (int64)(fplCode.IndexOf(" {intrinsic", System.StringComparison.OrdinalIgnoreCase))
        Assert.AreEqual<int64>(expectedEnd, actualSignatureEnd)
        prepareFplCode(filename, "", true) |> ignore

    [<DataRow("def cl T:obj {ctor T() {self}};", "T()")>]
    [<DataRow("def cl T:obj {ctor T(x:ind) {self}};", "T(ind)")>]
    [<DataRow("def cl T:obj {ctor T(x:pred) {self}};", "T(pred)")>]
    [<DataRow("def cl T:obj {ctor T(x:func) {self}};", "T(func)")>]
    [<DataRow("def cl T:obj {ctor T(x:obj) {self}};", "T(obj)")>]
    [<DataRow("def cl T:obj {ctor T(x:index) {self}};", "T(ind)")>]
    [<DataRow("def cl T:obj {ctor T(x:predicate) {self}};", "T(pred)")>]
    [<DataRow("def cl T:obj {ctor T(x:function) {self}};", "T(func)")>]
    [<DataRow("def cl T:obj {ctor T(x:object) {self}};", "T(obj)")>]
    [<DataRow("def cl T:obj {ctor T(x:Nat) {self}};", "T(Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:@Nat) {self}};", "T(@Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:tpl) {self}};", "T(tpl)")>]
    [<DataRow("def cl T:obj {ctor T(x:template) {self}};", "T(template)")>]
    [<DataRow("def cl T:obj {ctor T(x:tplTest) {self}};", "T(tplTest)")>]
    [<DataRow("def cl T:obj {ctor T(x:templateTest) {self}};", "T(templateTest)")>]
    [<DataRow("def cl T:obj {ctor T(x,y,z:obj) {self}};", "T(obj, obj, obj)")>]
    [<DataRow("def cl T:obj {ctor T(x,y:pred(z:obj)) {self}};", "T(pred(obj), pred(obj))")>]
    [<DataRow("def cl T:obj {ctor T(x,y:pred(u,v,w:obj)) {self}};", "T(pred(obj, obj, obj), pred(obj, obj, obj))")>]
    [<DataRow("def cl T:obj {ctor T(x:func(u:obj)->Nat) {self}};", "T(func(obj) -> Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:@Nat)) {self}};", "T(obj(@Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:Nat)) {self}};", "T(obj(Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:Test.Nat)) {self}};", "T(obj(Test.Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:index)) {self}};", "T(obj(ind))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:ind)) {self}};", "T(obj(ind))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:tpl)) {self}};", "T(obj(tpl))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:template)) {self}};", "T(obj(template))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:tplTest)) {self}};", "T(obj(tplTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:templateTest)) {self}};", "T(obj(templateTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:Nat,z:templateTest)) {self}};", "T(obj(Nat, templateTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:index,z:Nat)) {self}};", "T(obj(ind, Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:obj,z:@Nat)) {self}};", "T(obj(obj, @Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:tpl,z:index)) {self}};", "T(obj(tpl, ind))")>]

    [<DataRow("def cl T:obj {ctor T(x:*ind) {self}};", "T(*ind)")>]
    [<DataRow("def cl T:obj {ctor T(x:+pred) {self}};", "T(+pred)")>]
    [<DataRow("def cl T:obj {ctor T(x:*func) {self}};", "T(*func)")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj) {self}};", "T(+obj)")>]
    [<DataRow("def cl T:obj {ctor T(x:+index) {self}};", "T(+ind)")>]
    [<DataRow("def cl T:obj {ctor T(x:*predicate) {self}};", "T(*pred)")>]
    [<DataRow("def cl T:obj {ctor T(x:+function) {self}};", "T(+func)")>]
    [<DataRow("def cl T:obj {ctor T(x:*object) {self}};", "T(*obj)")>]
    [<DataRow("def cl T:obj {ctor T(x:+Nat) {self}};", "T(+Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:*@Nat) {self}};", "T(*@Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:*tpl) {self}};", "T(*tpl)")>]
    [<DataRow("def cl T:obj {ctor T(x:+template) {self}};", "T(+template)")>]
    [<DataRow("def cl T:obj {ctor T(x:*tplTest) {self}};", "T(*tplTest)")>]
    [<DataRow("def cl T:obj {ctor T(x:+templateTest) {self}};", "T(+templateTest)")>]
    [<DataRow("def cl T:obj {ctor T(x,y,z:+obj) {self}};", "T(+obj, +obj, +obj)")>]
    [<DataRow("def cl T:obj {ctor T(x,y:+pred(z:obj)) {self}};", "T(+pred(obj), +pred(obj))")>]
    [<DataRow("def cl T:obj {ctor T(x,y:pred(u,v,w:*obj)) {self}};", "T(pred(*obj, *obj, *obj), pred(*obj, *obj, *obj))")>]
    [<DataRow("def cl T:obj {ctor T(x:func(u:+obj)->Nat) {self}};", "T(func(+obj) -> Nat)")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:*@Nat)) {self}};", "T(obj(*@Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:obj(y:+Nat)) {self}};", "T(obj(+Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:+Test.Nat)) {self}};", "T(+obj(+Test.Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:*index)) {self}};", "T(+obj(*ind))")>]
    [<DataRow("def cl T:obj {ctor T(x:*obj(y:+ind)) {self}};", "T(*obj(+ind))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:*tpl)) {self}};", "T(+obj(*tpl))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:*template)) {self}};", "T(+obj(*template))")>]
    [<DataRow("def cl T:obj {ctor T(x:*obj(y:+tplTest)) {self}};", "T(*obj(+tplTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:*obj(y:*templateTest)) {self}};", "T(*obj(*templateTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:Nat,z:+templateTest)) {self}};", "T(+obj(Nat, +templateTest))")>]
    [<DataRow("def cl T:obj {ctor T(x:+obj(y:index,z:*Nat)) {self}};", "T(+obj(ind, *Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:*obj(y:*obj,z:+@Nat)) {self}};", "T(*obj(*obj, +@Nat))")>]
    [<DataRow("def cl T:obj {ctor T(x:*obj(y:+tpl,z:index)) {self}};", "T(*obj(+tpl, ind))")>]

    [<TestMethod>]
    member this.TestTypeSignatureOfConstructors(fplCode:string, expectedName:string) =
        let filename = "TestTypeSignatureOfConstructors"
        let result = prepareFplCode(filename + ".fpl", fplCode, false) 
        let cl = result.Value.Root.Scope[filename].Scope["T"]
        let fplValue = cl.Scope[expectedName]
        let actualTypeSignature = fplValue.Type(true)
        let actualSignatureStart = fplValue.NameStartPos.Index
        let actualSignatureEnd = fplValue.NameEndPos.Index
        Assert.AreEqual<string>(expectedName, actualTypeSignature)
        let expectedStart =
                (int64)14
        Assert.AreEqual<int64>(expectedStart, actualSignatureStart)
        let expectedEnd =
                (int64)(fplCode.IndexOf(" {self", System.StringComparison.OrdinalIgnoreCase))
        Assert.AreEqual<int64>(expectedEnd, actualSignatureEnd)
        prepareFplCode(filename, "", true) |> ignore