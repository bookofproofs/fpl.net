def class Nat: obj
{
    ctor Nat()
    {
        dec
            self:=x.RightMember()
        ;
        self
    }
}

loc (x + y) :=
    !tex: x "+" y 
    !eng: x "plus" y
    !ger: x "plus" y 
    ;            


localization iif(x,y) :=
    !tex: x "\Leftrightarrow" y
    !eng: x " if and only if " y
    !ger: x " dann und nur dann wenn " y
    ;

loc not(x) :=
    !tex: "\neg(" x ")"
    !eng: "not " x
    !ger: "nicht " x
    ;

loc and(p,q) :=
    !tex: p "\wedge" q
    !eng: p " and " q
    !ger: p " und " q
    ;

loc Equal(x,y) :=
    !tex: x "=" y
    !eng: x " equals " y
    !ger: x " ist gleich " y
    !ita: x " è uguale a " y
    !pol: x " równa się " y
    ;

loc NotEqual(x,y) :=
    !tex: x "\neq " y 
    !eng: x " is unequal " y
    !ger: x " ist ungleich " y 
    !pol: x ( " nie równa się " | " nie równe " ) y 
    ;



inf ModusPonens()
{
    dec ~p,q: pred;

    premise:
        and (p, impl (p,q) ) 
    conclusion:
        q
}

inf ModusTollens()
{
    dec ~p,q: pred;

    premise:
        and (not q, impl(p,q) )
    conclusion:
        not (p)
}

inf HypotheticalSyllogism()
{
    dec ~p,q,r: pred;
    premise:
        and (impl(p,q), impl(q,r))
    conclusion:
        impl(p,r)
}

inf DisjunctiveSyllogism()
{
    dec ~p,q: pred;
    premise:
        and (not(p), or(p,q))
    conclusion:
        q
}

inf ExistsByExample(p: pred(c: obj))
{
    premise:  
        p(c)
    conclusion: 
        ex x:obj {p(x)}
}

axiom Ax1()
{
    true
}

axiom Ax2(x:obj) 
{
    false
}

axiom Ax3(x:obj) 
{
    dec
        ~y: obj
    ;
    
    false
}

cor Ax3$1() 
{
    true
}

proof Ax3$1$1
{
    100. |- trivial
    qed
}

theorem Th1()
{
    true
}

theorem Th2(x:obj) 
{
    false
}

proof Th2$1
{
    100. |- trivial
    qed
}

theorem Th3(x:obj) 
{
    dec
        ~y: obj
    ;
    
    false
}

cor Th3$1()
{
    true
}

proof Th3$1$1
{
    100. |- trivial
    qed
}

cor Th3$1$2()
{
    true
}

prop Pr1()
{
    true
}

prop Pr2(x:obj) 
{
    false
}

proof Pr2$1
{
    100. |- trivial
    qed
}

prop Pr3(x:obj) 
{
    dec
        ~y: obj
    ;
    
    false
}

lem Le1()
{
    true
}

lem Le2(x:obj) 
{
    false
}

proof Le2$1
{
    400. |- assume not true
    500. |- revoke 400.
    qed
}




lem Le3(x:obj) 
{
    dec
        ~y: obj
    ;
    
    false
}

conj Conj1()
{
    true
}

conj Conj2(x:obj) 
{
    false
}

conj Conj3(x:obj) 
{
    dec
        ~y: obj
    ;
    
    false
}

def cl SomeFplClass: obj
{
    declaration
        ~x: object
        ~y: object
        x := 0
        y := 1
    ;
    ctor SomeFplClass()
    {
        dec
            base.obj()
        ;
        self
    }
    
    
}

;